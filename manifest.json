{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.1", "generated_at": "2023-03-20T01:36:20.982368Z", "invocation_id": "13237e46-75d0-4700-bf34-d8b91ebc175f", "env": {}, "project_id": "08796fff9b408a14408ff0f532bbceb6", "user_id": "8455792c-c01c-4bba-b28f-30a5ce13e2d7", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.jefferson_street_dbt.geo_fred__census_regions": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__census_regions", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__census_regions.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__census_regions.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__census_regions", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__census_regions"], "alias": "census", "checksum": {"name": "sha256", "checksum": "557d14b39087e3c60765ed5e91f7b2e6e08dcc466153d7982d0dcc2cea78556c"}, "config": {"enabled": true, "alias": "census", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains mapping between census regions and subregions in the US as defined by the US Census Bureau.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "census"}, "created_at": 1678902468.6676512, "relation_name": "`sbx-1-fred`.`geographies`.`census`", "raw_code": "WITH\n\ncensus_regions AS \n(\n{{\n    fred_get_subcategories(\n        table_name=ref('flt_fred__series_categories'), \n        parent_id=32043, \n        subcategory_id_name='census_region_id',\n        label_name='census_region_label'\n    )\n}}\n\n),\n\ncensus_subregions AS (\nSELECT DISTINCT\ncategory_id, label,\nCASE\n    WHEN parent_id=32051 THEN 32045\n    WHEN parent_id=32048 THEN 32044\n    WHEN parent_id=32054 THEN 32046\n    WHEN parent_id=32058 THEN 32047\n    ELSE NULL\nEND AS census_region_id\nFROM {{ ref('flt_fred__series_categories') }}\nWHERE parent_id IN (32048, 32051, 32054, 32058)\n)\n\nSELECT\ncs.category_id AS census_subregion_id,\ncs.label AS census_subregion_label,\ncr.census_region_id,\ncr.census_region_label\nFROM census_subregions cs\nLEFT JOIN census_regions cr\nON cs.census_region_id=cr.census_region_id", "language": "sql", "refs": [["flt_fred__series_categories"], ["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.fred_get_subcategories"], "nodes": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__census_regions.sql", "compiled": true, "compiled_code": "WITH\n\ncensus_regions AS \n(\nSELECT DISTINCT\ncategory_id AS census_region_id, label AS census_region_label\nFROM `sbx-1-fred`.`filtered`.`categories`\nWHERE parent_id = 32043\n\n),\n\ncensus_subregions AS (\nSELECT DISTINCT\ncategory_id, label,\nCASE\n    WHEN parent_id=32051 THEN 32045\n    WHEN parent_id=32048 THEN 32044\n    WHEN parent_id=32054 THEN 32046\n    WHEN parent_id=32058 THEN 32047\n    ELSE NULL\nEND AS census_region_id\nFROM `sbx-1-fred`.`filtered`.`categories`\nWHERE parent_id IN (32048, 32051, 32054, 32058)\n)\n\nSELECT\ncs.category_id AS census_subregion_id,\ncs.label AS census_subregion_label,\ncr.census_region_id,\ncr.census_region_label\nFROM census_subregions cs\nLEFT JOIN census_regions cr\nON cs.census_region_id=cr.census_region_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.geo_fred__msas": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__msas", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__msas.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__msas.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__msas", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__msas"], "alias": "msas", "checksum": {"name": "sha256", "checksum": "26145e094047bed9194fb845bca8ea9413168ccd27fdc2998493cfb22d9b71fd"}, "config": {"enabled": true, "alias": "msas", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains mapping between US states/territories and Metropolitan Statistical Areas (MSAs).", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "msas"}, "created_at": 1678902468.6718822, "relation_name": "`sbx-1-fred`.`geographies`.`msas`", "raw_code": "SELECT DISTINCT\n    mp.american_state_id, \n    cat.category_id as msa_id, \n    cat.label\nFROM {{ ref('state_mappings') }} mp\nLEFT JOIN {{ ref('flt_fred__series_categories') }} cat\nON mp.msa_parent_id = cat.parent_id\nWHERE cat.category_id IS NOT NULL", "language": "sql", "refs": [["state_mappings"], ["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.jefferson_street_dbt.state_mappings", "model.jefferson_street_dbt.flt_fred__series_categories", "seed.jefferson_street_dbt.state_mappings", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__msas.sql", "compiled": true, "compiled_code": "SELECT DISTINCT\n    mp.american_state_id, \n    cat.category_id as msa_id, \n    cat.label\nFROM `sbx-1-fred`.`external`.`state_mappings` mp\nLEFT JOIN `sbx-1-fred`.`filtered`.`categories` cat\nON mp.msa_parent_id = cat.parent_id\nWHERE cat.category_id IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.geo_fred__bls_regions": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__bls_regions", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__bls_regions.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__bls_regions.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__bls_regions", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__bls_regions"], "alias": "bls", "checksum": {"name": "sha256", "checksum": "21074eed7154463c793562fc9c1db95c9e406f11a402e7a47bba8b3447773cb5"}, "config": {"enabled": true, "alias": "bls", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains regions defined by the Bureau of Labor Statistics which stratify the US by population size.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "bls"}, "created_at": 1678902468.676394, "relation_name": "`sbx-1-fred`.`geographies`.`bls`", "raw_code": "{{\n    fred_get_subcategories(\n        table_name=ref('flt_fred__series_categories'), \n        parent_id=32849, \n        subcategory_id_name='bls_region_id'\n    )\n}}", "language": "sql", "refs": [["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.fred_get_subcategories"], "nodes": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__bls_regions.sql", "compiled": true, "compiled_code": "SELECT DISTINCT\ncategory_id AS bls_region_id, label AS label\nFROM `sbx-1-fred`.`filtered`.`categories`\nWHERE parent_id = 32849", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.geo_fred__countries": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__countries", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__countries.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__countries.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__countries", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__countries"], "alias": "countries", "checksum": {"name": "sha256", "checksum": "5d779f320b6d46c5c25becb265f6a0c91e7fb1b7d86868272af5ac433d0738b2"}, "config": {"enabled": true, "alias": "countries", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains category IDs of all countries in FRED.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "countries"}, "created_at": 1678902468.6450908, "relation_name": "`sbx-1-fred`.`geographies`.`countries`", "raw_code": "{{\n    fred_get_subcategories(\n        table_name=ref('flt_fred__series_categories'), \n        parent_id=32264, \n        subcategory_id_name='country_id'\n    )\n}}", "language": "sql", "refs": [["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.fred_get_subcategories"], "nodes": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__countries.sql", "compiled": true, "compiled_code": "SELECT DISTINCT\ncategory_id AS country_id, label AS label\nFROM `sbx-1-fred`.`filtered`.`categories`\nWHERE parent_id = 32264", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.geo_fred__fed_districts": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__fed_districts", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__fed_districts.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__fed_districts.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__fed_districts", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__fed_districts"], "alias": "fed_districts", "checksum": {"name": "sha256", "checksum": "a49bac22235cc45d9fb4df8649571a5d3ce1d44ee4691058845c273e0a31a632"}, "config": {"enabled": true, "alias": "fed_districts", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains category IDs for each of the twelve Fed districts.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "fed_districts"}, "created_at": 1678902468.6574142, "relation_name": "`sbx-1-fred`.`geographies`.`fed_districts`", "raw_code": "{{\n    fred_get_subcategories(\n        table_name=ref('flt_fred__series_categories'), \n        parent_id=32071, \n        subcategory_id_name='fed_district_id'\n    )\n}}", "language": "sql", "refs": [["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.fred_get_subcategories"], "nodes": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__fed_districts.sql", "compiled": true, "compiled_code": "SELECT DISTINCT\ncategory_id AS fed_district_id, label AS label\nFROM `sbx-1-fred`.`filtered`.`categories`\nWHERE parent_id = 32071", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.geo_fred__bea_regions": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__bea_regions", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__bea_regions.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__bea_regions.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__bea_regions", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__bea_regions"], "alias": "bea", "checksum": {"name": "sha256", "checksum": "6a5b3be822ac5a702a267fb41ca6434fa1962e601a3ba6247fa588070f01072e"}, "config": {"enabled": true, "alias": "bea", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains mapping between US states and regions as defined by the Bureau of Economic Analysis.", "columns": {"american_state_id": {"name": "american_state_id", "description": "Category ID corresponding to a US state or territory", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bea_region_id": {"name": "bea_region_id", "description": "Category ID correspoding to a BEA region", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "The name of the region", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "bea"}, "created_at": 1678902468.663725, "relation_name": "`sbx-1-fred`.`geographies`.`bea`", "raw_code": "SELECT DISTINCT\n    mp.american_state_id, \n    mp.bea_region_id, \n    cat.label\nFROM {{ ref('state_mappings') }} mp\nLEFT JOIN {{ ref('flt_fred__series_categories') }} cat\nON mp.bea_region_id = cat.category_id\nWHERE cat.category_id IS NOT NULL", "language": "sql", "refs": [["state_mappings"], ["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.jefferson_street_dbt.state_mappings", "model.jefferson_street_dbt.flt_fred__series_categories", "seed.jefferson_street_dbt.state_mappings", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__bea_regions.sql", "compiled": true, "compiled_code": "SELECT DISTINCT\n    mp.american_state_id, \n    mp.bea_region_id, \n    cat.label\nFROM `sbx-1-fred`.`external`.`state_mappings` mp\nLEFT JOIN `sbx-1-fred`.`filtered`.`categories` cat\nON mp.bea_region_id = cat.category_id\nWHERE cat.category_id IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.geo_fred__counties": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__counties", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__counties.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__counties.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__counties", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__counties"], "alias": "counties", "checksum": {"name": "sha256", "checksum": "1529dd7d7c96ebc57ad6dd4e7e16f9124e95977ee7cdaaa3239886f4ae5339ac"}, "config": {"enabled": true, "alias": "counties", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains mapping between states and counties/parishes in the US.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "counties"}, "created_at": 1678902468.6535094, "relation_name": "`sbx-1-fred`.`geographies`.`counties`", "raw_code": "SELECT DISTINCT\n    mp.american_state_id, \n    cat.category_id as county_id, \n    cat.label\nFROM {{ ref('state_mappings') }} mp\nLEFT JOIN {{ ref('flt_fred__series_categories') }} cat\nON mp.county_parent_id = cat.parent_id\nWHERE cat.category_id IS NOT NULL", "language": "sql", "refs": [["state_mappings"], ["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.jefferson_street_dbt.state_mappings", "model.jefferson_street_dbt.flt_fred__series_categories", "seed.jefferson_street_dbt.state_mappings", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__counties.sql", "compiled": true, "compiled_code": "SELECT DISTINCT\n    mp.american_state_id, \n    cat.category_id as county_id, \n    cat.label\nFROM `sbx-1-fred`.`external`.`state_mappings` mp\nLEFT JOIN `sbx-1-fred`.`filtered`.`categories` cat\nON mp.county_parent_id = cat.parent_id\nWHERE cat.category_id IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.geo_fred__states": {"database": "sbx-1-fred", "schema": "geographies", "name": "geo_fred__states", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "intermediate/fred/geographies/geo_fred__states.sql", "original_file_path": "models/intermediate/fred/geographies/geo_fred__states.sql", "unique_id": "model.jefferson_street_dbt.geo_fred__states", "fqn": ["jefferson_street_dbt", "intermediate", "fred", "geographies", "geo_fred__states"], "alias": "states", "checksum": {"name": "sha256", "checksum": "77bdbaa219cf4fafbceda1e32af56e5949f39952b9b121c2f145854e1baf6f7f"}, "config": {"enabled": true, "alias": "states", "schema": "geographies", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains category IDs for the US states and territories.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/intermediate/fred/geographies/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "sbx-1-fred", "schema": "geographies", "alias": "states"}, "created_at": 1678902468.649394, "relation_name": "`sbx-1-fred`.`geographies`.`states`", "raw_code": "{{\n    fred_get_subcategories(\n        table_name=ref('flt_fred__series_categories'), \n        parent_id=27281, \n        subcategory_id_name='american_state_id'\n    )\n}}", "language": "sql", "refs": [["flt_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.fred_get_subcategories"], "nodes": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/intermediate/fred/geographies/geo_fred__states.sql", "compiled": true, "compiled_code": "SELECT DISTINCT\ncategory_id AS american_state_id, label AS label\nFROM `sbx-1-fred`.`filtered`.`categories`\nWHERE parent_id = 27281", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.flt_fred__observations": {"database": "sbx-1-fred", "schema": "filtered", "name": "flt_fred__observations", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/filtered/flt_fred__observations.sql", "original_file_path": "models/staging/fred/filtered/flt_fred__observations.sql", "unique_id": "model.jefferson_street_dbt.flt_fred__observations", "fqn": ["jefferson_street_dbt", "staging", "fred", "filtered", "flt_fred__observations"], "alias": "observations", "checksum": {"name": "sha256", "checksum": "29c95b4050860b3b92096d9616db0edb20b27a80829e1e570e5b1e9290230589"}, "config": {"enabled": true, "alias": "observations", "schema": "filtered", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Series observations filtered for observation completeness and continuity", "columns": {"observation_id": {"name": "observation_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/filtered/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "filtered", "alias": "observations"}, "created_at": 1678410503.6570272, "relation_name": "`sbx-1-fred`.`filtered`.`observations`", "raw_code": "WITH\n\nobservations AS (\n    SELECT * FROM {{ ref('dd_fred__observations') }}\n),\n\n{{ series_id_filter('observations') }}", "language": "sql", "refs": [["dd_fred__observations"], ["md_fred__series_completeness"], ["md_fred__series_continuity"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.series_id_filter"], "nodes": ["model.jefferson_street_dbt.dd_fred__observations", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/filtered/flt_fred__observations.sql", "compiled": true, "compiled_code": "WITH\n\nobservations AS (\n    SELECT * FROM `sbx-1-fred`.`de_duped`.`observations`\n),\n\n\nseries_completeness AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_completeness`\n    WHERE nobs IS NOT NULL --exclude series ids with zero observations\n),\n\nseries_continuity AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_continuity`\n    WHERE discontinued=FALSE\n)\n\nSELECT\n    observations.*\nFROM observations\nINNER JOIN series_completeness\nON observations.series_id=series_completeness.series_id\nINNER JOIN series_continuity\nON observations.series_id=series_continuity.series_id\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.flt_fred__release_series": {"database": "sbx-1-fred", "schema": "filtered", "name": "flt_fred__release_series", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/filtered/flt_fred__release_series.sql", "original_file_path": "models/staging/fred/filtered/flt_fred__release_series.sql", "unique_id": "model.jefferson_street_dbt.flt_fred__release_series", "fqn": ["jefferson_street_dbt", "staging", "fred", "filtered", "flt_fred__release_series"], "alias": "series_meta", "checksum": {"name": "sha256", "checksum": "b11aea0db3916a26f65e0f505ba30cfc810f09c8a61d00c7e95df2796e418c51"}, "config": {"enabled": true, "alias": "series_meta", "schema": "filtered", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Series meta data filtered for observation completeness and continuity", "columns": {"series_id": {"name": "series_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/filtered/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "filtered", "alias": "series_meta"}, "created_at": 1678410503.6513326, "relation_name": "`sbx-1-fred`.`filtered`.`series_meta`", "raw_code": "WITH\n\nseries_meta AS (\n    SELECT * FROM {{ ref('dd_fred__release_series') }}\n),\n\n{{ series_id_filter('series_meta') }}", "language": "sql", "refs": [["dd_fred__release_series"], ["md_fred__series_completeness"], ["md_fred__series_continuity"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.series_id_filter"], "nodes": ["model.jefferson_street_dbt.dd_fred__release_series", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/filtered/flt_fred__release_series.sql", "compiled": true, "compiled_code": "WITH\n\nseries_meta AS (\n    SELECT * FROM `sbx-1-fred`.`de_duped`.`series_meta`\n),\n\n\nseries_completeness AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_completeness`\n    WHERE nobs IS NOT NULL --exclude series ids with zero observations\n),\n\nseries_continuity AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_continuity`\n    WHERE discontinued=FALSE\n)\n\nSELECT\n    series_meta.*\nFROM series_meta\nINNER JOIN series_completeness\nON series_meta.series_id=series_completeness.series_id\nINNER JOIN series_continuity\nON series_meta.series_id=series_continuity.series_id\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.flt_fred__series_categories": {"database": "sbx-1-fred", "schema": "filtered", "name": "flt_fred__series_categories", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/filtered/flt_fred__series_categories.sql", "original_file_path": "models/staging/fred/filtered/flt_fred__series_categories.sql", "unique_id": "model.jefferson_street_dbt.flt_fred__series_categories", "fqn": ["jefferson_street_dbt", "staging", "fred", "filtered", "flt_fred__series_categories"], "alias": "categories", "checksum": {"name": "sha256", "checksum": "d4ca72ea5819dd60f1bb8a7b7c90b1e6b4bbbcd92c8597f745f7ec624665917b"}, "config": {"enabled": true, "alias": "categories", "schema": "filtered", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Series categories filtered for observation completeness and continuity", "columns": {"category_id": {"name": "category_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/filtered/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "filtered", "alias": "categories"}, "created_at": 1678410503.6633446, "relation_name": "`sbx-1-fred`.`filtered`.`categories`", "raw_code": "WITH\n\ncategories AS (\n    SELECT * FROM {{ ref('dd_fred__series_categories') }}\n),\n\n{{ series_id_filter('categories') }}", "language": "sql", "refs": [["dd_fred__series_categories"], ["md_fred__series_completeness"], ["md_fred__series_continuity"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.series_id_filter"], "nodes": ["model.jefferson_street_dbt.dd_fred__series_categories", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/filtered/flt_fred__series_categories.sql", "compiled": true, "compiled_code": "WITH\n\ncategories AS (\n    SELECT * FROM `sbx-1-fred`.`de_duped`.`categories`\n),\n\n\nseries_completeness AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_completeness`\n    WHERE nobs IS NOT NULL --exclude series ids with zero observations\n),\n\nseries_continuity AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_continuity`\n    WHERE discontinued=FALSE\n)\n\nSELECT\n    categories.*\nFROM categories\nINNER JOIN series_completeness\nON categories.series_id=series_completeness.series_id\nINNER JOIN series_continuity\nON categories.series_id=series_continuity.series_id\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.flt_fred__series_tags": {"database": "sbx-1-fred", "schema": "filtered", "name": "flt_fred__series_tags", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/filtered/flt_fred__series_tags.sql", "original_file_path": "models/staging/fred/filtered/flt_fred__series_tags.sql", "unique_id": "model.jefferson_street_dbt.flt_fred__series_tags", "fqn": ["jefferson_street_dbt", "staging", "fred", "filtered", "flt_fred__series_tags"], "alias": "tags", "checksum": {"name": "sha256", "checksum": "6c1dfe54f312d7d84843df4787a78abf8f1b8ebe61eefad94b98e7ee89d37d59"}, "config": {"enabled": true, "alias": "tags", "schema": "filtered", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Series tags filtered for observation completeness and continuity", "columns": {"tag_id": {"name": "tag_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/filtered/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "filtered", "alias": "tags"}, "created_at": 1678410503.6694365, "relation_name": "`sbx-1-fred`.`filtered`.`tags`", "raw_code": "WITH\n\ntags AS (\n    SELECT * FROM {{ ref('dd_fred__series_tags') }}\n),\n\n{{ series_id_filter('tags') }}", "language": "sql", "refs": [["dd_fred__series_tags"], ["md_fred__series_completeness"], ["md_fred__series_continuity"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.series_id_filter"], "nodes": ["model.jefferson_street_dbt.dd_fred__series_tags", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/filtered/flt_fred__series_tags.sql", "compiled": true, "compiled_code": "WITH\n\ntags AS (\n    SELECT * FROM `sbx-1-fred`.`de_duped`.`tags`\n),\n\n\nseries_completeness AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_completeness`\n    WHERE nobs IS NOT NULL --exclude series ids with zero observations\n),\n\nseries_continuity AS (\n    SELECT series_id FROM `sbx-1-fred`.`meta_data`.`series_continuity`\n    WHERE discontinued=FALSE\n)\n\nSELECT\n    tags.*\nFROM tags\nINNER JOIN series_completeness\nON tags.series_id=series_completeness.series_id\nINNER JOIN series_continuity\nON tags.series_id=series_continuity.series_id\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.md_fred__series_completeness": {"database": "sbx-1-fred", "schema": "meta_data", "name": "md_fred__series_completeness", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/meta_data/md_fred__series_completeness.sql", "original_file_path": "models/staging/fred/meta_data/md_fred__series_completeness.sql", "unique_id": "model.jefferson_street_dbt.md_fred__series_completeness", "fqn": ["jefferson_street_dbt", "staging", "fred", "meta_data", "md_fred__series_completeness"], "alias": "series_completeness", "checksum": {"name": "sha256", "checksum": "6cd23a8aeada5670735d4c75db2fbd2056b97ead4441f5c6f6d374c4d93b1c79"}, "config": {"enabled": true, "alias": "series_completeness", "schema": "meta_data", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "View FRED series IDs by observation meta-statistics", "columns": {"series_id": {"name": "series_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/meta_data/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "meta_data", "alias": "series_completeness"}, "created_at": 1678410503.6837862, "relation_name": "`sbx-1-fred`.`meta_data`.`series_completeness`", "raw_code": "WITH\n\nseries_meta AS (\n    SELECT\n    series_id,\n    label,\n    observation_start,\n    observation_end,\n    frequency_short,\n    CASE\n        WHEN frequency_short='D' THEN DATE_DIFF(observation_end, observation_start, DAY)\n        WHEN frequency_short='W' THEN DATE_DIFF(observation_end, observation_start, WEEK)\n        WHEN frequency_short='M' THEN DATE_DIFF(observation_end, observation_start, MONTH)\n        WHEN frequency_short='Q' THEN DATE_DIFF(observation_end, observation_start, MONTH)/3\n        WHEN frequency_short='A' THEN DATE_DIFF(observation_end, observation_start, YEAR)\n        ELSE NULL\n    END AS expected_nobs\n    FROM {{ ref('dd_fred__release_series') }}\n),\n\nseries_meta_remove_zeroes AS (\n    SELECT\n        series_id,\n        label,\n        observation_start,\n        observation_end,\n        frequency_short,\n        CASE\n            WHEN expected_nobs=0 THEN 1\n            ELSE expected_nobs\n        END AS expected_nobs\n    FROM series_meta\n),\n\nseries_observation_count AS (\n    SELECT\n        series_id,\n        CASE\n            WHEN COUNT(series_id)=0 THEN 1\n            ELSE COUNT(series_id)\n        END AS nobs,\n        COUNT(DISTINCT unrevised_value) AS nobs_unique\n    FROM {{ ref('dd_fred__observations') }}\n    GROUP BY series_id\n)\n\nSELECT\n    series_meta_remove_zeroes.*,\n    series_observation_count.nobs,\n    series_observation_count.nobs_unique,\n    series_observation_count.nobs/series_meta_remove_zeroes.expected_nobs AS observation_fullness,\n    series_observation_count.nobs_unique/series_observation_count.nobs AS observation_uniqueness\nFROM\nseries_meta_remove_zeroes\nLEFT JOIN series_observation_count\nON series_meta_remove_zeroes.series_id=series_observation_count.series_id", "language": "sql", "refs": [["dd_fred__release_series"], ["dd_fred__observations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.jefferson_street_dbt.dd_fred__release_series", "model.jefferson_street_dbt.dd_fred__observations"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/meta_data/md_fred__series_completeness.sql", "compiled": true, "compiled_code": "WITH\n\nseries_meta AS (\n    SELECT\n    series_id,\n    label,\n    observation_start,\n    observation_end,\n    frequency_short,\n    CASE\n        WHEN frequency_short='D' THEN DATE_DIFF(observation_end, observation_start, DAY)\n        WHEN frequency_short='W' THEN DATE_DIFF(observation_end, observation_start, WEEK)\n        WHEN frequency_short='M' THEN DATE_DIFF(observation_end, observation_start, MONTH)\n        WHEN frequency_short='Q' THEN DATE_DIFF(observation_end, observation_start, MONTH)/3\n        WHEN frequency_short='A' THEN DATE_DIFF(observation_end, observation_start, YEAR)\n        ELSE NULL\n    END AS expected_nobs\n    FROM `sbx-1-fred`.`de_duped`.`series_meta`\n),\n\nseries_meta_remove_zeroes AS (\n    SELECT\n        series_id,\n        label,\n        observation_start,\n        observation_end,\n        frequency_short,\n        CASE\n            WHEN expected_nobs=0 THEN 1\n            ELSE expected_nobs\n        END AS expected_nobs\n    FROM series_meta\n),\n\nseries_observation_count AS (\n    SELECT\n        series_id,\n        CASE\n            WHEN COUNT(series_id)=0 THEN 1\n            ELSE COUNT(series_id)\n        END AS nobs,\n        COUNT(DISTINCT unrevised_value) AS nobs_unique\n    FROM `sbx-1-fred`.`de_duped`.`observations`\n    GROUP BY series_id\n)\n\nSELECT\n    series_meta_remove_zeroes.*,\n    series_observation_count.nobs,\n    series_observation_count.nobs_unique,\n    series_observation_count.nobs/series_meta_remove_zeroes.expected_nobs AS observation_fullness,\n    series_observation_count.nobs_unique/series_observation_count.nobs AS observation_uniqueness\nFROM\nseries_meta_remove_zeroes\nLEFT JOIN series_observation_count\nON series_meta_remove_zeroes.series_id=series_observation_count.series_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.md_fred__series_continuity": {"database": "sbx-1-fred", "schema": "meta_data", "name": "md_fred__series_continuity", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/meta_data/md_fred__series_continuity.sql", "original_file_path": "models/staging/fred/meta_data/md_fred__series_continuity.sql", "unique_id": "model.jefferson_street_dbt.md_fred__series_continuity", "fqn": ["jefferson_street_dbt", "staging", "fred", "meta_data", "md_fred__series_continuity"], "alias": "series_continuity", "checksum": {"name": "sha256", "checksum": "74b6fd0d42114227fcaeefd0d893a5fc251f38de45a45779ba6cf114c976a1c1"}, "config": {"enabled": true, "alias": "series_continuity", "schema": "meta_data", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED series IDs labeled by whether they are discontinued or not (no longer being updated with new observations)", "columns": {"series_id": {"name": "series_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/meta_data/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "meta_data", "alias": "series_continuity"}, "created_at": 1678410503.6767178, "relation_name": "`sbx-1-fred`.`meta_data`.`series_continuity`", "raw_code": "WITH\n\ndiscontinued_series AS (\n    SELECT\n        series_id,\n        label\n    FROM {{ ref('dd_fred__series_tags') }}\n    WHERE label='discontinued'\n),\n\nseries_meta AS (\n    SELECT * FROM {{ ref('dd_fred__release_series') }}\n)\n\nSELECT\n    series_meta.series_id,\n    CASE\n        WHEN discontinued_series.label IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS discontinued\nFROM series_meta\nLEFT JOIN discontinued_series\nON series_meta.series_id=discontinued_series.series_id", "language": "sql", "refs": [["dd_fred__series_tags"], ["dd_fred__release_series"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.jefferson_street_dbt.dd_fred__series_tags", "model.jefferson_street_dbt.dd_fred__release_series"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/meta_data/md_fred__series_continuity.sql", "compiled": true, "compiled_code": "WITH\n\ndiscontinued_series AS (\n    SELECT\n        series_id,\n        label\n    FROM `sbx-1-fred`.`de_duped`.`tags`\n    WHERE label='discontinued'\n),\n\nseries_meta AS (\n    SELECT * FROM `sbx-1-fred`.`de_duped`.`series_meta`\n)\n\nSELECT\n    series_meta.series_id,\n    CASE\n        WHEN discontinued_series.label IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS discontinued\nFROM series_meta\nLEFT JOIN discontinued_series\nON series_meta.series_id=discontinued_series.series_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.dd_fred__observations_revised": {"database": "sbx-1-fred", "schema": "de_duped", "name": "dd_fred__observations_revised", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/de_duped/dd_fred__observations_revised.sql", "original_file_path": "models/staging/fred/de_duped/dd_fred__observations_revised.sql", "unique_id": "model.jefferson_street_dbt.dd_fred__observations_revised", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "dd_fred__observations_revised"], "alias": "observations_revised", "checksum": {"name": "sha256", "checksum": "8a508fbf18e9cf85adddf5bef0191a132e62306a7685472c651192a0132322f9"}, "config": {"enabled": true, "alias": "observations_revised", "schema": "de_duped", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED revised observations recast to correct types with primary key", "columns": {"observation_id": {"name": "observation_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/de_duped/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "de_duped", "alias": "observations_revised"}, "created_at": 1678410503.71489, "relation_name": "`sbx-1-fred`.`de_duped`.`observations_revised`", "raw_code": "{{ dbt_utils.deduplicate(\n    relation=ref('rr_fred__observations_revised'),\n    partition_by='observation_id',\n    order_by=\"ingest_timestamp desc\",\n   )\n}}", "language": "sql", "refs": [["rr_fred__observations_revised"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["model.jefferson_street_dbt.rr_fred__observations_revised"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/dd_fred__observations_revised.sql", "compiled": true, "compiled_code": "select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by ingest_timestamp desc\n                limit 1\n            )[offset(0)] unique\n        from `sbx-1-fred`.`recast_renamed`.`observations_revised` original\n        group by observation_id\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.dd_fred__observations_unrevised": {"database": "sbx-1-fred", "schema": "de_duped", "name": "dd_fred__observations_unrevised", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/de_duped/dd_fred__observations_unrevised.sql", "original_file_path": "models/staging/fred/de_duped/dd_fred__observations_unrevised.sql", "unique_id": "model.jefferson_street_dbt.dd_fred__observations_unrevised", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "dd_fred__observations_unrevised"], "alias": "observations_unrevised", "checksum": {"name": "sha256", "checksum": "5b7b191ec746dea5ffcae16e56df59891c4b1aa916719063df8ef5924bd69ae4"}, "config": {"enabled": true, "alias": "observations_unrevised", "schema": "de_duped", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED unrevised observations recast to correct types with primary key", "columns": {"observation_id": {"name": "observation_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/de_duped/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "de_duped", "alias": "observations_unrevised"}, "created_at": 1678410503.7206666, "relation_name": "`sbx-1-fred`.`de_duped`.`observations_unrevised`", "raw_code": "{{ dbt_utils.deduplicate(\n    relation=ref('rr_fred__observations_unrevised'),\n    partition_by='observation_id',\n    order_by=\"ingest_timestamp desc\",\n   )\n}}", "language": "sql", "refs": [["rr_fred__observations_unrevised"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["model.jefferson_street_dbt.rr_fred__observations_unrevised"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/dd_fred__observations_unrevised.sql", "compiled": true, "compiled_code": "select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by ingest_timestamp desc\n                limit 1\n            )[offset(0)] unique\n        from `sbx-1-fred`.`recast_renamed`.`observations_unrevised` original\n        group by observation_id\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.dd_fred__series_tags": {"database": "sbx-1-fred", "schema": "de_duped", "name": "dd_fred__series_tags", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/de_duped/dd_fred__series_tags.sql", "original_file_path": "models/staging/fred/de_duped/dd_fred__series_tags.sql", "unique_id": "model.jefferson_street_dbt.dd_fred__series_tags", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "dd_fred__series_tags"], "alias": "tags", "checksum": {"name": "sha256", "checksum": "2739a7838c25a6e5596ee4114a9cc63aa4908b5d8260e66851854a4d68ea507a"}, "config": {"enabled": true, "alias": "tags", "schema": "de_duped", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED series meta data recast to correct types with primary key", "columns": {"tag_id": {"name": "tag_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/de_duped/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "de_duped", "alias": "tags"}, "created_at": 1678410503.7517698, "relation_name": "`sbx-1-fred`.`de_duped`.`tags`", "raw_code": "{{ dbt_utils.deduplicate(\n    relation=ref('rr_fred__series_tags'),\n    partition_by='tag_id',\n    order_by=\"ingest_timestamp desc\",\n   )\n}}", "language": "sql", "refs": [["rr_fred__series_tags"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["model.jefferson_street_dbt.rr_fred__series_tags"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/dd_fred__series_tags.sql", "compiled": true, "compiled_code": "select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by ingest_timestamp desc\n                limit 1\n            )[offset(0)] unique\n        from `sbx-1-fred`.`recast_renamed`.`tags` original\n        group by tag_id\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.dd_fred__release_dates": {"database": "sbx-1-fred", "schema": "de_duped", "name": "dd_fred__release_dates", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/de_duped/dd_fred__release_dates.sql", "original_file_path": "models/staging/fred/de_duped/dd_fred__release_dates.sql", "unique_id": "model.jefferson_street_dbt.dd_fred__release_dates", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "dd_fred__release_dates"], "alias": "release_dates", "checksum": {"name": "sha256", "checksum": "e5224373ed897d98ab05e0cf005ce8b5569c9fd7ac4387f30fefc3fd3fb9cde9"}, "config": {"enabled": true, "alias": "release_dates", "schema": "de_duped", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED release dates recast to correct types with primary key", "columns": {"release_date_id": {"name": "release_date_id", "description": "The primary key for this table; it should be unique per release_id per release_date", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/de_duped/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "de_duped", "alias": "release_dates"}, "created_at": 1678410503.7334085, "relation_name": "`sbx-1-fred`.`de_duped`.`release_dates`", "raw_code": "{{ dbt_utils.deduplicate(\n    relation=ref('rr_fred__release_dates'),\n    partition_by='release_date_id',\n    order_by=\"ingest_timestamp desc\",\n   )\n}}", "language": "sql", "refs": [["rr_fred__release_dates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["model.jefferson_street_dbt.rr_fred__release_dates"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/dd_fred__release_dates.sql", "compiled": true, "compiled_code": "select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by ingest_timestamp desc\n                limit 1\n            )[offset(0)] unique\n        from `sbx-1-fred`.`recast_renamed`.`release_dates` original\n        group by release_date_id\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.dd_fred__observations": {"database": "sbx-1-fred", "schema": "de_duped", "name": "dd_fred__observations", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/de_duped/dd_fred__observations.sql", "original_file_path": "models/staging/fred/de_duped/dd_fred__observations.sql", "unique_id": "model.jefferson_street_dbt.dd_fred__observations", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "dd_fred__observations"], "alias": "observations", "checksum": {"name": "sha256", "checksum": "b9e20925d6c6eaa7afb049cf86be5b0ce8bf53af89145fcaea98a3d49a6249f2"}, "config": {"enabled": true, "alias": "observations", "schema": "de_duped", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED observations revised and unrevised with relevant dates", "columns": {"observation_id": {"name": "observation_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/de_duped/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "de_duped", "alias": "observations"}, "created_at": 1678410503.7267077, "relation_name": "`sbx-1-fred`.`de_duped`.`observations`", "raw_code": "WITH\n\nunrevised AS (\n    SELECT * FROM {{ ref('dd_fred__observations_unrevised') }}\n),\n\nrevised AS (\n    SELECT * FROM {{ ref('dd_fred__observations_revised') }}\n)\n\nSELECT\n    revised.observation_id,\n    unrevised.series_id,\n    unrevised.observation_date,\n    unrevised.realtime_start AS unrevised_date,\n    revised.realtime_start AS revised_date,\n    unrevised.value AS unrevised_value,\n    revised.value AS revised_value\nFROM unrevised\nRIGHT JOIN revised\nON unrevised.observation_id=revised.observation_id", "language": "sql", "refs": [["dd_fred__observations_unrevised"], ["dd_fred__observations_revised"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.jefferson_street_dbt.dd_fred__observations_unrevised", "model.jefferson_street_dbt.dd_fred__observations_revised"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/dd_fred__observations.sql", "compiled": true, "compiled_code": "WITH\n\nunrevised AS (\n    SELECT * FROM `sbx-1-fred`.`de_duped`.`observations_unrevised`\n),\n\nrevised AS (\n    SELECT * FROM `sbx-1-fred`.`de_duped`.`observations_revised`\n)\n\nSELECT\n    revised.observation_id,\n    unrevised.series_id,\n    unrevised.observation_date,\n    unrevised.realtime_start AS unrevised_date,\n    revised.realtime_start AS revised_date,\n    unrevised.value AS unrevised_value,\n    revised.value AS revised_value\nFROM unrevised\nRIGHT JOIN revised\nON unrevised.observation_id=revised.observation_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.dd_fred__release_series": {"database": "sbx-1-fred", "schema": "de_duped", "name": "dd_fred__release_series", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/de_duped/dd_fred__release_series.sql", "original_file_path": "models/staging/fred/de_duped/dd_fred__release_series.sql", "unique_id": "model.jefferson_street_dbt.dd_fred__release_series", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "dd_fred__release_series"], "alias": "series_meta", "checksum": {"name": "sha256", "checksum": "3403afc237e76b46c538f23305243d871b4b53e668e6a4a0c725d7683942c3fc"}, "config": {"enabled": true, "alias": "series_meta", "schema": "de_duped", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED series meta data recast to correct types", "columns": {"series_id": {"name": "series_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/de_duped/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "de_duped", "alias": "series_meta"}, "created_at": 1678410503.7397368, "relation_name": "`sbx-1-fred`.`de_duped`.`series_meta`", "raw_code": "{{ dbt_utils.deduplicate(\n    relation=ref('rr_fred__release_series'),\n    partition_by='series_id',\n    order_by=\"ingest_timestamp desc\",\n   )\n}}", "language": "sql", "refs": [["rr_fred__release_series"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["model.jefferson_street_dbt.rr_fred__release_series"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/dd_fred__release_series.sql", "compiled": true, "compiled_code": "select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by ingest_timestamp desc\n                limit 1\n            )[offset(0)] unique\n        from `sbx-1-fred`.`recast_renamed`.`series_meta` original\n        group by series_id\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.dd_fred__series_categories": {"database": "sbx-1-fred", "schema": "de_duped", "name": "dd_fred__series_categories", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/de_duped/dd_fred__series_categories.sql", "original_file_path": "models/staging/fred/de_duped/dd_fred__series_categories.sql", "unique_id": "model.jefferson_street_dbt.dd_fred__series_categories", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "dd_fred__series_categories"], "alias": "categories", "checksum": {"name": "sha256", "checksum": "0f51492f1eea994ba9c6e0758c2b320f4a890c0262d62b6867f9c3633c970db4"}, "config": {"enabled": true, "alias": "categories", "schema": "de_duped", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED series categories recast to correct types with primary key", "columns": {"category_unique_id": {"name": "category_unique_id", "description": "The primary key for this table; it should be unique for every unique pairing of category_ids and series_ids", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/de_duped/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "de_duped", "alias": "categories"}, "created_at": 1678410503.745445, "relation_name": "`sbx-1-fred`.`de_duped`.`categories`", "raw_code": "{{ dbt_utils.deduplicate(\n    relation=ref('rr_fred__series_categories'),\n    partition_by='category_unique_id',\n    order_by=\"ingest_timestamp desc\",\n   )\n}}", "language": "sql", "refs": [["rr_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.deduplicate"], "nodes": ["model.jefferson_street_dbt.rr_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/dd_fred__series_categories.sql", "compiled": true, "compiled_code": "select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by ingest_timestamp desc\n                limit 1\n            )[offset(0)] unique\n        from `sbx-1-fred`.`recast_renamed`.`categories` original\n        group by category_unique_id\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.rr_fred__series_tags": {"database": "sbx-1-fred", "schema": "recast_renamed", "name": "rr_fred__series_tags", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/recast_renamed/rr_fred__series_tags.sql", "original_file_path": "models/staging/fred/recast_renamed/rr_fred__series_tags.sql", "unique_id": "model.jefferson_street_dbt.rr_fred__series_tags", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "rr_fred__series_tags"], "alias": "tags", "checksum": {"name": "sha256", "checksum": "4af59bc1a7a9ba68323cb50c143564b939e2ff15329700f6e820fd15389532bf"}, "config": {"enabled": true, "alias": "tags", "schema": "recast_renamed", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED series meta data recast to correct types with primary key", "columns": {"tag_id": {"name": "tag_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/recast_renamed/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "recast_renamed", "alias": "tags"}, "created_at": 1678410503.8191385, "relation_name": "`sbx-1-fred`.`recast_renamed`.`tags`", "raw_code": "WITH\n\nrecast AS (\n\n    SELECT\n        TO_HEX(SHA1(series_id || name)) AS tag_id,\n        name AS label,\n        notes,\n        group_id,\n        CAST(LEFT(created, LENGTH(created)-3) AS TIMESTAMP) AS created_timestamp,\n        CAST(popularity AS INT64) AS popularity,\n        CAST(series_count AS INT64) AS series_count,\n        series_id,\n\t    {{ format_jefferson_street_ingest_time() }} AS ingest_timestamp,\n        jefferson_street_ingest_name AS ingest_name\n\n    from {{ source('fred_raw', 'tags') }}\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["fred_raw", "tags"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.format_jefferson_street_ingest_time"], "nodes": ["source.jefferson_street_dbt.fred_raw.tags"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/rr_fred__series_tags.sql", "compiled": true, "compiled_code": "WITH\n\nrecast AS (\n\n    SELECT\n        TO_HEX(SHA1(series_id || name)) AS tag_id,\n        name AS label,\n        notes,\n        group_id,\n        CAST(LEFT(created, LENGTH(created)-3) AS TIMESTAMP) AS created_timestamp,\n        CAST(popularity AS INT64) AS popularity,\n        CAST(series_count AS INT64) AS series_count,\n        series_id,\n\t    \nCAST(jefferson_street_ingest_datetime as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n AS ingest_timestamp,\n        jefferson_street_ingest_name AS ingest_name\n\n    from `sbx-1-fred`.`raw`.`fred_series_tags`\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.rr_fred__series_categories": {"database": "sbx-1-fred", "schema": "recast_renamed", "name": "rr_fred__series_categories", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/recast_renamed/rr_fred__series_categories.sql", "original_file_path": "models/staging/fred/recast_renamed/rr_fred__series_categories.sql", "unique_id": "model.jefferson_street_dbt.rr_fred__series_categories", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "rr_fred__series_categories"], "alias": "categories", "checksum": {"name": "sha256", "checksum": "154ab70c205da190dfb21cedfaac3847c980afdae3e3c08dacbcf55243db26cc"}, "config": {"enabled": true, "alias": "categories", "schema": "recast_renamed", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED series categories recast to correct types with primary key", "columns": {"category_unique_id": {"name": "category_unique_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/recast_renamed/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "recast_renamed", "alias": "categories"}, "created_at": 1678410503.8126483, "relation_name": "`sbx-1-fred`.`recast_renamed`.`categories`", "raw_code": "WITH\n\nrecast AS (\n\n    SELECT\n        TO_HEX(SHA1(category_id || series_id)) AS category_unique_id,\n        CAST(category_id AS INT64) AS category_id,\n        name AS label,\n        CAST(parent_id AS INT64) AS parent_id,\n        series_id,\n\t    {{ format_jefferson_street_ingest_time() }} AS ingest_timestamp,\n        jefferson_street_ingest_name AS ingest_name\n    FROM {{source('fred_raw', 'categories') }}\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["fred_raw", "categories"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.format_jefferson_street_ingest_time"], "nodes": ["source.jefferson_street_dbt.fred_raw.categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/rr_fred__series_categories.sql", "compiled": true, "compiled_code": "WITH\n\nrecast AS (\n\n    SELECT\n        TO_HEX(SHA1(category_id || series_id)) AS category_unique_id,\n        CAST(category_id AS INT64) AS category_id,\n        name AS label,\n        CAST(parent_id AS INT64) AS parent_id,\n        series_id,\n\t    \nCAST(jefferson_street_ingest_datetime as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n AS ingest_timestamp,\n        jefferson_street_ingest_name AS ingest_name\n    FROM `sbx-1-fred`.`raw`.`fred_series_categories`\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.rr_fred__release_series": {"database": "sbx-1-fred", "schema": "recast_renamed", "name": "rr_fred__release_series", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/recast_renamed/rr_fred__release_series.sql", "original_file_path": "models/staging/fred/recast_renamed/rr_fred__release_series.sql", "unique_id": "model.jefferson_street_dbt.rr_fred__release_series", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "rr_fred__release_series"], "alias": "series_meta", "checksum": {"name": "sha256", "checksum": "fb8d67cbac9d829187e75b86e8ad66f3ff4746fa83aa0a5f36e9d4c25e4311de"}, "config": {"enabled": true, "alias": "series_meta", "schema": "recast_renamed", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED series meta data recast to correct types", "columns": {"series_id": {"name": "series_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/recast_renamed/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "recast_renamed", "alias": "series_meta"}, "created_at": 1678410503.8065073, "relation_name": "`sbx-1-fred`.`recast_renamed`.`series_meta`", "raw_code": "WITH\n\nrecast AS (\n\n    SELECT\n        series_id,\n        CAST(realtime_start AS DATE) AS realtime_start,\n        CAST(realtime_end AS DATE) AS realtime_end,\n        title AS label,\n        CAST(observation_start AS DATE) AS observation_start,\n        CAST(observation_end AS DATE) AS observation_end,\n        frequency,\n        frequency_short,\n        units,\n        units_short,\n        seasonal_adjustment,\n        seasonal_adjustment_short,\n        CAST(last_updated as TIMESTAMP) as last_updated,\n        CAST(popularity AS BIGNUMERIC) AS popularity,\n        CAST(group_popularity AS BIGNUMERIC) AS group_popularity,\n        CASE\n            WHEN notes = '.' THEN NULL\n            ELSE notes\n        END AS notes,\n        CAST(release_id AS BIGNUMERIC) AS release_id,\n\t{{ format_jefferson_street_ingest_time() }} AS ingest_timestamp,\n    jefferson_street_ingest_name AS ingest_name\n\n    FROM {{ source('fred_raw', 'release_series') }}\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["fred_raw", "release_series"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.format_jefferson_street_ingest_time"], "nodes": ["source.jefferson_street_dbt.fred_raw.release_series"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/rr_fred__release_series.sql", "compiled": true, "compiled_code": "WITH\n\nrecast AS (\n\n    SELECT\n        series_id,\n        CAST(realtime_start AS DATE) AS realtime_start,\n        CAST(realtime_end AS DATE) AS realtime_end,\n        title AS label,\n        CAST(observation_start AS DATE) AS observation_start,\n        CAST(observation_end AS DATE) AS observation_end,\n        frequency,\n        frequency_short,\n        units,\n        units_short,\n        seasonal_adjustment,\n        seasonal_adjustment_short,\n        CAST(last_updated as TIMESTAMP) as last_updated,\n        CAST(popularity AS BIGNUMERIC) AS popularity,\n        CAST(group_popularity AS BIGNUMERIC) AS group_popularity,\n        CASE\n            WHEN notes = '.' THEN NULL\n            ELSE notes\n        END AS notes,\n        CAST(release_id AS BIGNUMERIC) AS release_id,\n\t\nCAST(jefferson_street_ingest_datetime as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n AS ingest_timestamp,\n    jefferson_street_ingest_name AS ingest_name\n\n    FROM `sbx-1-fred`.`raw`.`fred_release_series`\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.rr_fred__release_dates": {"database": "sbx-1-fred", "schema": "recast_renamed", "name": "rr_fred__release_dates", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/recast_renamed/rr_fred__release_dates.sql", "original_file_path": "models/staging/fred/recast_renamed/rr_fred__release_dates.sql", "unique_id": "model.jefferson_street_dbt.rr_fred__release_dates", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "rr_fred__release_dates"], "alias": "release_dates", "checksum": {"name": "sha256", "checksum": "2be9b6ce0f4d145417d9ebeba1aaad888e97317551c5a5e2e98016e4f7c3c9f3"}, "config": {"enabled": true, "alias": "release_dates", "schema": "recast_renamed", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED release dates recast to correct types with primary key", "columns": {"release_date_id": {"name": "release_date_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/recast_renamed/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "recast_renamed", "alias": "release_dates"}, "created_at": 1678410503.7999926, "relation_name": "`sbx-1-fred`.`recast_renamed`.`release_dates`", "raw_code": "WITH\n\nrecast AS ( \n\n    SELECT\n\t\tTO_HEX(SHA1(release_id || date)) AS release_date_id,\n\t    CAST(release_id AS INT64) AS release_id,\n    \trelease_name,\n    \tCAST(date AS DATE) AS release_date,\n\t    {{ format_jefferson_street_ingest_time() }} AS ingest_timestamp,\n\t\tjefferson_street_ingest_name AS ingest_name\n    from {{ source('fred_raw', 'release_dates') }}\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["fred_raw", "release_dates"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.format_jefferson_street_ingest_time"], "nodes": ["source.jefferson_street_dbt.fred_raw.release_dates"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/rr_fred__release_dates.sql", "compiled": true, "compiled_code": "WITH\n\nrecast AS ( \n\n    SELECT\n\t\tTO_HEX(SHA1(release_id || date)) AS release_date_id,\n\t    CAST(release_id AS INT64) AS release_id,\n    \trelease_name,\n    \tCAST(date AS DATE) AS release_date,\n\t    \nCAST(jefferson_street_ingest_datetime as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n AS ingest_timestamp,\n\t\tjefferson_street_ingest_name AS ingest_name\n    from `sbx-1-fred`.`raw`.`fred_release_dates`\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.rr_fred__observations_unrevised": {"database": "sbx-1-fred", "schema": "recast_renamed", "name": "rr_fred__observations_unrevised", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/recast_renamed/rr_fred__observations_unrevised.sql", "original_file_path": "models/staging/fred/recast_renamed/rr_fred__observations_unrevised.sql", "unique_id": "model.jefferson_street_dbt.rr_fred__observations_unrevised", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "rr_fred__observations_unrevised"], "alias": "observations_unrevised", "checksum": {"name": "sha256", "checksum": "623bdf46af8fba1709066fc9136084afc703d43c7d6186cddca8247b10a06ab3"}, "config": {"enabled": true, "alias": "observations_unrevised", "schema": "recast_renamed", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED unrevised observations recast to correct types with primary key", "columns": {"observation_id": {"name": "observation_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/recast_renamed/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "recast_renamed", "alias": "observations_unrevised"}, "created_at": 1678410503.7924, "relation_name": "`sbx-1-fred`.`recast_renamed`.`observations_unrevised`", "raw_code": "WITH\n\nrecast AS (\n\n    SELECT\n\t    TO_HEX(SHA1(series_id || date)) AS observation_id,\n\t    series_id AS series_id,\n\t    CAST(realtime_start AS DATE) AS realtime_start,\n\t    CAST(realtime_end AS DATE) AS realtime_end,\n\t    CAST(date AS DATE) AS observation_date,\n\t    {{ format_jefferson_street_ingest_time() }} AS ingest_timestamp,\n            CASE\n                WHEN value = '.' THEN NULL\n                ELSE CAST(value AS BIGNUMERIC)\n            END AS value,\n        jefferson_street_ingest_name AS ingest_name\n\n    FROM {{ source('fred_raw', 'unrevised_observations')}}\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["fred_raw", "unrevised_observations"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.format_jefferson_street_ingest_time"], "nodes": ["source.jefferson_street_dbt.fred_raw.unrevised_observations"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/rr_fred__observations_unrevised.sql", "compiled": true, "compiled_code": "WITH\n\nrecast AS (\n\n    SELECT\n\t    TO_HEX(SHA1(series_id || date)) AS observation_id,\n\t    series_id AS series_id,\n\t    CAST(realtime_start AS DATE) AS realtime_start,\n\t    CAST(realtime_end AS DATE) AS realtime_end,\n\t    CAST(date AS DATE) AS observation_date,\n\t    \nCAST(jefferson_street_ingest_datetime as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n AS ingest_timestamp,\n            CASE\n                WHEN value = '.' THEN NULL\n                ELSE CAST(value AS BIGNUMERIC)\n            END AS value,\n        jefferson_street_ingest_name AS ingest_name\n\n    FROM `sbx-1-fred`.`raw`.`fred_series_observations_unrevised`\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.rr_fred__observations_revised": {"database": "sbx-1-fred", "schema": "recast_renamed", "name": "rr_fred__observations_revised", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/fred/recast_renamed/rr_fred__observations_revised.sql", "original_file_path": "models/staging/fred/recast_renamed/rr_fred__observations_revised.sql", "unique_id": "model.jefferson_street_dbt.rr_fred__observations_revised", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "rr_fred__observations_revised"], "alias": "observations_revised", "checksum": {"name": "sha256", "checksum": "ab33c16802b8ea3f09eed96968c83e9bd2ec1e26ef24b955361123e492dcf982"}, "config": {"enabled": true, "alias": "observations_revised", "schema": "recast_renamed", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FRED revised observations recast to correct types with primary key", "columns": {"observation_id": {"name": "observation_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/fred/recast_renamed/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-fred", "schema": "recast_renamed", "alias": "observations_revised"}, "created_at": 1678410503.785974, "relation_name": "`sbx-1-fred`.`recast_renamed`.`observations_revised`", "raw_code": "WITH\n\nrecast AS (\n\n    SELECT\n\t    TO_HEX(SHA1(series_id || date)) AS observation_id,\n\t    series_id AS series_id,\n\t    CAST(realtime_start AS DATE) AS realtime_start,\n\t    CAST(realtime_end AS DATE) AS realtime_end,\n\t    CAST(date AS DATE) AS observation_date,\n            CASE\n                WHEN value = '.' THEN NULL\n                ELSE cast(value AS BIGNUMERIC)\n            END AS value,\n        {{ format_jefferson_street_ingest_time() }} AS ingest_timestamp,\n        jefferson_street_ingest_name AS ingest_name\n\n    from {{ source('fred_raw', 'unrevised_observations') }}\n)\n\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["fred_raw", "unrevised_observations"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.format_jefferson_street_ingest_time"], "nodes": ["source.jefferson_street_dbt.fred_raw.unrevised_observations"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/rr_fred__observations_revised.sql", "compiled": true, "compiled_code": "WITH\n\nrecast AS (\n\n    SELECT\n\t    TO_HEX(SHA1(series_id || date)) AS observation_id,\n\t    series_id AS series_id,\n\t    CAST(realtime_start AS DATE) AS realtime_start,\n\t    CAST(realtime_end AS DATE) AS realtime_end,\n\t    CAST(date AS DATE) AS observation_date,\n            CASE\n                WHEN value = '.' THEN NULL\n                ELSE cast(value AS BIGNUMERIC)\n            END AS value,\n        \nCAST(jefferson_street_ingest_datetime as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n AS ingest_timestamp,\n        jefferson_street_ingest_name AS ingest_name\n\n    from `sbx-1-fred`.`raw`.`fred_series_observations_unrevised`\n)\n\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__company_meta": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_meta", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_meta.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_meta.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_meta", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_meta"], "alias": "company_meta", "checksum": {"name": "sha256", "checksum": "1f85755bd55849ac6b0d6a5284d4217c24779e78bf6316bb31df6533efbb8ed2"}, "config": {"enabled": true, "alias": "company_meta", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains meta data about companies e.g. description, EIN, state of incorporation, etc.", "columns": {"cik": {"name": "cik", "description": "The primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "company_meta"}, "created_at": 1678410503.8800528, "relation_name": "`sbx-1-sec-edgar`.`refined`.`company_meta`", "raw_code": "WITH\n\nbase as (\n  SELECT \n    CAST(cik as INT64) as cik,\n    entitytype as entity_type,\n\n    CASE\n      WHEN sic = '' THEN NULL\n      ELSE CAST(sic as INT64)\n    END AS sic,\n    sicdescription as sic_description,\n\n    CASE\n      WHEN insidertransactionforownerexists = '0' THEN FALSE\n      WHEN insidertransactionforownerexists = '1' THEN TRUE\n      ELSE NULL\n    END AS insider_transaction_for_owner_exists,\n\n    CASE\n      WHEN insidertransactionforissuerexists = '0' THEN FALSE\n      WHEN insidertransactionforissuerexists = '1' THEN TRUE\n      ELSE NULL\n    END AS insider_transaction_for_issuer_exists,\n\n    name,\n\n    CASE\n      WHEN ein = 'None' THEN NULL\n      WHEN CAST(ein AS INT64) = 0 THEN NULL\n      ELSE CAST(ein AS INT64)\n    END AS ein,\n\n    CASE\n      WHEN description = '' THEN NULL\n      ELSE description\n    END AS description,\n    \n    CASE\n      WHEN website = '' THEN NULL\n      ELSE website\n    END AS website,\n    \n    CASE\n      WHEN investorwebsite = '' THEN NULL\n      ELSE investorwebsite\n    END AS investor_website,\n    \n    category,\n\n    CASE\n      WHEN fiscalyearend = 'None' THEN NULL\n      WHEN fiscalyearend = '0229' THEN CAST('0228' AS DATE FORMAT 'MMDD')\n      ELSE CAST(fiscalyearend AS DATE FORMAT 'MMDD')\n    END fiscal_year_end,\n\n    stateofincorporation AS state_of_incorporation,\n    stateofincorporationdescription AS state_of_incorporation_description,\n    phone,\n\n    CASE\n      WHEN flags = '' THEN NULL\n      ELSE flags\n    END AS flags,\n    \n  FROM {{ source('sec_edgar_raw', 'recent_submissions') }}\n)\n\nSELECT * FROM base", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "recent_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_meta.sql", "compiled": true, "compiled_code": "WITH\n\nbase as (\n  SELECT \n    CAST(cik as INT64) as cik,\n    entitytype as entity_type,\n\n    CASE\n      WHEN sic = '' THEN NULL\n      ELSE CAST(sic as INT64)\n    END AS sic,\n    sicdescription as sic_description,\n\n    CASE\n      WHEN insidertransactionforownerexists = '0' THEN FALSE\n      WHEN insidertransactionforownerexists = '1' THEN TRUE\n      ELSE NULL\n    END AS insider_transaction_for_owner_exists,\n\n    CASE\n      WHEN insidertransactionforissuerexists = '0' THEN FALSE\n      WHEN insidertransactionforissuerexists = '1' THEN TRUE\n      ELSE NULL\n    END AS insider_transaction_for_issuer_exists,\n\n    name,\n\n    CASE\n      WHEN ein = 'None' THEN NULL\n      WHEN CAST(ein AS INT64) = 0 THEN NULL\n      ELSE CAST(ein AS INT64)\n    END AS ein,\n\n    CASE\n      WHEN description = '' THEN NULL\n      ELSE description\n    END AS description,\n    \n    CASE\n      WHEN website = '' THEN NULL\n      ELSE website\n    END AS website,\n    \n    CASE\n      WHEN investorwebsite = '' THEN NULL\n      ELSE investorwebsite\n    END AS investor_website,\n    \n    category,\n\n    CASE\n      WHEN fiscalyearend = 'None' THEN NULL\n      WHEN fiscalyearend = '0229' THEN CAST('0228' AS DATE FORMAT 'MMDD')\n      ELSE CAST(fiscalyearend AS DATE FORMAT 'MMDD')\n    END fiscal_year_end,\n\n    stateofincorporation AS state_of_incorporation,\n    stateofincorporationdescription AS state_of_incorporation_description,\n    phone,\n\n    CASE\n      WHEN flags = '' THEN NULL\n      ELSE flags\n    END AS flags,\n    \n  FROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_recent`\n)\n\nSELECT * FROM base", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__company_former_names": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_former_names", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_former_names.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_former_names.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_former_names", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_former_names"], "alias": "company_former_names", "checksum": {"name": "sha256", "checksum": "a692a90c83b22b9969afc88678ed75772b2e20390ae8c34f06246dcc468df97b"}, "config": {"enabled": true, "alias": "company_former_names", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Former names of companies linked to their CIKs.", "columns": {"company_name_id": {"name": "company_name_id", "description": "The primary key for this table. Each row is assumed to have a unique CIK, company_name, and start_timestamp combination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "company_former_names"}, "created_at": 1678410503.8726585, "relation_name": "`sbx-1-sec-edgar`.`refined`.`company_former_names`", "raw_code": "WITH\n\narr AS (\n  SELECT \n    cik,\n    JSON_EXTRACT_ARRAY(PARSE_JSON(formernames)) AS formernames\n  FROM {{ source('sec_edgar_raw', 'recent_submissions') }}\n),\n\nextracted AS (\n  SELECT \n    cik,\n    former_name_records['name'] AS company_name,\n    former_name_records['from'] AS start_timestamp,\n    former_name_records['to'] AS end_timestamp \n  FROM arr,\n  UNNEST(formernames) AS former_name_records\n),\n\nrecast AS (\n  SELECT\n\n    TO_HEX(SHA1(cik || STRING(company_name) || STRING(start_timestamp))) AS company_name_id,\n    CAST(cik AS INT64) AS cik,\n    STRING(company_name) AS company_name,\n    TIMESTAMP(STRING(start_timestamp)) AS start_timestamp,\n    TIMESTAMP(STRING(end_timestamp)) AS end_timestamp\n  FROM extracted\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "recent_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_former_names.sql", "compiled": true, "compiled_code": "WITH\n\narr AS (\n  SELECT \n    cik,\n    JSON_EXTRACT_ARRAY(PARSE_JSON(formernames)) AS formernames\n  FROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_recent`\n),\n\nextracted AS (\n  SELECT \n    cik,\n    former_name_records['name'] AS company_name,\n    former_name_records['from'] AS start_timestamp,\n    former_name_records['to'] AS end_timestamp \n  FROM arr,\n  UNNEST(formernames) AS former_name_records\n),\n\nrecast AS (\n  SELECT\n\n    TO_HEX(SHA1(cik || STRING(company_name) || STRING(start_timestamp))) AS company_name_id,\n    CAST(cik AS INT64) AS cik,\n    STRING(company_name) AS company_name,\n    TIMESTAMP(STRING(start_timestamp)) AS start_timestamp,\n    TIMESTAMP(STRING(end_timestamp)) AS end_timestamp\n  FROM extracted\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_facts_us_gaap", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_facts_us_gaap.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_facts_us_gaap.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_facts_us_gaap"], "alias": "gaap_metrics", "checksum": {"name": "sha256", "checksum": "ad5f5cbbe209eaef731bb4528da7e5b677a3d2698027fb2edbb70b051a4eb331"}, "config": {"enabled": true, "alias": "gaap_metrics", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "GAAP financial metrics reported in 8-K/10-K filings", "columns": {"metric_id": {"name": "metric_id", "description": "The primary key for this table. Each row is assumed to have a unique accession_number, start_date, end_date, and metric combination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "gaap_metrics"}, "created_at": 1678410503.8637512, "relation_name": "`sbx-1-sec-edgar`.`refined`.`gaap_metrics`", "raw_code": "{% set cols = [\"accn\", \"description\", \"end\", \"filed\", \"form\", \"fp\", \"frame\", \"fy\", \"label\", \"metric\", \"start\", \"units\", \"val\"] %}\n\nWITH\n\nsource AS (\n\nSELECT \n    cik,\n    PARSE_JSON(us_gaap) AS us_gaap, \nFROM {{ source('sec_edgar_raw', 'company_facts')}}\nWHERE us_gaap != ''\n),\n\narrays AS (\n    SELECT\n        {% for c in cols %}\n        JSON_EXTRACT_STRING_ARRAY(us_gaap.{{c}}) AS {{c}}_col,\n        {% endfor %}\n        cik\n    FROM source\n),\n\n{% for c in cols %}\n{{c}}_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST({{c}}_col) AS num_val\n),\n{% endfor %}\n\njoined AS (\n    SELECT\n        {% for c in cols %}\n        {{c}}_unnested.num_val AS {{c}}_col,\n        {% endfor %}\n        accn_unnested.cik\n    FROM accn_unnested\n    {% for c in cols[1:] %}\n        INNER JOIN {{c}}_unnested ON accn_unnested.row_num = {{c}}_unnested.row_num\n    {% endfor %}\n    \n),\n\nquotations_removed AS (\n    SELECT\n        {% for c in cols %}\n        REPLACE({{c}}_col, '\"', '') AS {{c}}_col,\n        {% endfor %}\n        cik\n    FROM joined\n),\n\nnulls_added AS (\n    SELECT\n        {% for c in cols %}\n        CASE\n            WHEN {{c}}_col = 'null' then null\n            ELSE {{c}}_col\n        END AS {{c}}_col,\n        {% endfor %}\n        cik\n    FROM quotations_removed\n),\n\nrecast_and_renamed AS (\n    SELECT\n        TO_HEX(SHA1(accn_col || start_col || end_col || metric_col)) AS metric_id,\n        accn_col AS accession_number,\n        description_col AS description,\n        PARSE_DATE('%Y-%m-%d', end_col) AS end_date,\n        PARSE_DATE('%Y-%m-%d', filed_col) AS filed_date,\n        form_col AS form,\n        fp_col AS fiscal_period,\n        frame_col AS frame,\n        CAST(fy_col AS INT64) AS fiscal_year,\n        label_col AS label,\n        metric_col AS metric,\n        PARSE_DATE('%Y-%m-%d', start_col) AS start_date,\n        units_col AS units,\n        CAST(val_col AS BIGNUMERIC) AS value,\n        CAST(cik AS INT64) AS cik\n    FROM quotations_removed\n)\n\n\nSELECT * FROM recast_and_renamed", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "company_facts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.company_facts"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_facts_us_gaap.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n\nSELECT \n    cik,\n    PARSE_JSON(us_gaap) AS us_gaap, \nFROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_facts`\nWHERE us_gaap != ''\n),\n\narrays AS (\n    SELECT\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.accn) AS accn_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.description) AS description_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.end) AS end_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.filed) AS filed_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.form) AS form_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.fp) AS fp_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.frame) AS frame_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.fy) AS fy_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.label) AS label_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.metric) AS metric_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.start) AS start_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.units) AS units_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(us_gaap.val) AS val_col,\n        \n        cik\n    FROM source\n),\n\n\naccn_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(accn_col) AS num_val\n),\n\ndescription_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(description_col) AS num_val\n),\n\nend_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(end_col) AS num_val\n),\n\nfiled_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(filed_col) AS num_val\n),\n\nform_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(form_col) AS num_val\n),\n\nfp_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(fp_col) AS num_val\n),\n\nframe_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(frame_col) AS num_val\n),\n\nfy_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(fy_col) AS num_val\n),\n\nlabel_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(label_col) AS num_val\n),\n\nmetric_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(metric_col) AS num_val\n),\n\nstart_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(start_col) AS num_val\n),\n\nunits_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(units_col) AS num_val\n),\n\nval_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(val_col) AS num_val\n),\n\n\njoined AS (\n    SELECT\n        \n        accn_unnested.num_val AS accn_col,\n        \n        description_unnested.num_val AS description_col,\n        \n        end_unnested.num_val AS end_col,\n        \n        filed_unnested.num_val AS filed_col,\n        \n        form_unnested.num_val AS form_col,\n        \n        fp_unnested.num_val AS fp_col,\n        \n        frame_unnested.num_val AS frame_col,\n        \n        fy_unnested.num_val AS fy_col,\n        \n        label_unnested.num_val AS label_col,\n        \n        metric_unnested.num_val AS metric_col,\n        \n        start_unnested.num_val AS start_col,\n        \n        units_unnested.num_val AS units_col,\n        \n        val_unnested.num_val AS val_col,\n        \n        accn_unnested.cik\n    FROM accn_unnested\n    \n        INNER JOIN description_unnested ON accn_unnested.row_num = description_unnested.row_num\n    \n        INNER JOIN end_unnested ON accn_unnested.row_num = end_unnested.row_num\n    \n        INNER JOIN filed_unnested ON accn_unnested.row_num = filed_unnested.row_num\n    \n        INNER JOIN form_unnested ON accn_unnested.row_num = form_unnested.row_num\n    \n        INNER JOIN fp_unnested ON accn_unnested.row_num = fp_unnested.row_num\n    \n        INNER JOIN frame_unnested ON accn_unnested.row_num = frame_unnested.row_num\n    \n        INNER JOIN fy_unnested ON accn_unnested.row_num = fy_unnested.row_num\n    \n        INNER JOIN label_unnested ON accn_unnested.row_num = label_unnested.row_num\n    \n        INNER JOIN metric_unnested ON accn_unnested.row_num = metric_unnested.row_num\n    \n        INNER JOIN start_unnested ON accn_unnested.row_num = start_unnested.row_num\n    \n        INNER JOIN units_unnested ON accn_unnested.row_num = units_unnested.row_num\n    \n        INNER JOIN val_unnested ON accn_unnested.row_num = val_unnested.row_num\n    \n    \n),\n\nquotations_removed AS (\n    SELECT\n        \n        REPLACE(accn_col, '\"', '') AS accn_col,\n        \n        REPLACE(description_col, '\"', '') AS description_col,\n        \n        REPLACE(end_col, '\"', '') AS end_col,\n        \n        REPLACE(filed_col, '\"', '') AS filed_col,\n        \n        REPLACE(form_col, '\"', '') AS form_col,\n        \n        REPLACE(fp_col, '\"', '') AS fp_col,\n        \n        REPLACE(frame_col, '\"', '') AS frame_col,\n        \n        REPLACE(fy_col, '\"', '') AS fy_col,\n        \n        REPLACE(label_col, '\"', '') AS label_col,\n        \n        REPLACE(metric_col, '\"', '') AS metric_col,\n        \n        REPLACE(start_col, '\"', '') AS start_col,\n        \n        REPLACE(units_col, '\"', '') AS units_col,\n        \n        REPLACE(val_col, '\"', '') AS val_col,\n        \n        cik\n    FROM joined\n),\n\nnulls_added AS (\n    SELECT\n        \n        CASE\n            WHEN accn_col = 'null' then null\n            ELSE accn_col\n        END AS accn_col,\n        \n        CASE\n            WHEN description_col = 'null' then null\n            ELSE description_col\n        END AS description_col,\n        \n        CASE\n            WHEN end_col = 'null' then null\n            ELSE end_col\n        END AS end_col,\n        \n        CASE\n            WHEN filed_col = 'null' then null\n            ELSE filed_col\n        END AS filed_col,\n        \n        CASE\n            WHEN form_col = 'null' then null\n            ELSE form_col\n        END AS form_col,\n        \n        CASE\n            WHEN fp_col = 'null' then null\n            ELSE fp_col\n        END AS fp_col,\n        \n        CASE\n            WHEN frame_col = 'null' then null\n            ELSE frame_col\n        END AS frame_col,\n        \n        CASE\n            WHEN fy_col = 'null' then null\n            ELSE fy_col\n        END AS fy_col,\n        \n        CASE\n            WHEN label_col = 'null' then null\n            ELSE label_col\n        END AS label_col,\n        \n        CASE\n            WHEN metric_col = 'null' then null\n            ELSE metric_col\n        END AS metric_col,\n        \n        CASE\n            WHEN start_col = 'null' then null\n            ELSE start_col\n        END AS start_col,\n        \n        CASE\n            WHEN units_col = 'null' then null\n            ELSE units_col\n        END AS units_col,\n        \n        CASE\n            WHEN val_col = 'null' then null\n            ELSE val_col\n        END AS val_col,\n        \n        cik\n    FROM quotations_removed\n),\n\nrecast_and_renamed AS (\n    SELECT\n        TO_HEX(SHA1(accn_col || start_col || end_col || metric_col)) AS metric_id,\n        accn_col AS accession_number,\n        description_col AS description,\n        PARSE_DATE('%Y-%m-%d', end_col) AS end_date,\n        PARSE_DATE('%Y-%m-%d', filed_col) AS filed_date,\n        form_col AS form,\n        fp_col AS fiscal_period,\n        frame_col AS frame,\n        CAST(fy_col AS INT64) AS fiscal_year,\n        label_col AS label,\n        metric_col AS metric,\n        PARSE_DATE('%Y-%m-%d', start_col) AS start_date,\n        units_col AS units,\n        CAST(val_col AS BIGNUMERIC) AS value,\n        CAST(cik AS INT64) AS cik\n    FROM quotations_removed\n)\n\n\nSELECT * FROM recast_and_renamed", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_facts_dei", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_facts_dei.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_facts_dei.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_facts_dei"], "alias": "dei_metrics", "checksum": {"name": "sha256", "checksum": "fa0b82f11609a87887a58127f96b5af676e38af654233d876e044d9f04b41968"}, "config": {"enabled": true, "alias": "dei_metrics", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Non-GAAP financial metrics reported in 8-K/10-K filings", "columns": {"metric_id": {"name": "metric_id", "description": "The primary key for this table. Each row is assumed to have a unique accession_number, start_date, end_date, and metric combination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "dei_metrics"}, "created_at": 1678410503.855857, "relation_name": "`sbx-1-sec-edgar`.`refined`.`dei_metrics`", "raw_code": "{% set cols = [\"accn\", \"description\", \"end\", \"filed\", \"form\", \"fp\", \"frame\", \"fy\", \"label\", \"metric\", \"start\", \"units\", \"val\"] %}\n\nWITH\n\nsource AS (\n\nSELECT \n    cik, \n    PARSE_JSON(dei) AS dei, \nFROM {{ source('sec_edgar_raw', 'company_facts')}}\nWHERE dei != ''\n),\n\narrays AS (\n    SELECT\n        {% for c in cols %}\n        JSON_EXTRACT_STRING_ARRAY(dei.{{c}}) AS {{c}}_col,\n        {% endfor %}\n        cik\n    FROM source\n),\n\n{% for c in cols %}\n{{c}}_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST({{c}}_col) AS num_val\n),\n{% endfor %}\n\njoined AS (\n    SELECT\n        {% for c in cols %}\n        {{c}}_unnested.num_val AS {{c}}_col,\n        {% endfor %}\n        accn_unnested.cik\n    FROM accn_unnested\n    {% for c in cols[1:] %}\n        INNER JOIN {{c}}_unnested ON accn_unnested.row_num = {{c}}_unnested.row_num\n    {% endfor %}\n    \n),\n\nquotations_removed AS (\n    SELECT\n        {% for c in cols %}\n        REPLACE({{c}}_col, '\"', '') AS {{c}}_col,\n        {% endfor %}\n        cik\n    FROM joined\n),\n\nnulls_added AS (\n    SELECT\n        {% for c in cols %}\n        CASE\n            WHEN {{c}}_col = 'null' then null\n            ELSE {{c}}_col\n        END AS {{c}}_col,\n        {% endfor %}\n        cik\n    FROM quotations_removed\n),\n\nrecast_and_renamed AS (\n    SELECT\n        TO_HEX(SHA1(accn_col || start_col || end_col || metric_col)) AS metric_id,\n        accn_col AS accession_number,\n        description_col AS description,\n        PARSE_DATE('%Y-%m-%d', end_col) AS end_date,\n        PARSE_DATE('%Y-%m-%d', filed_col) AS filed_date,\n        form_col AS form,\n        fp_col AS fiscal_period,\n        frame_col AS frame,\n        CAST(fy_col AS INT64) AS fiscal_year,\n        label_col AS label,\n        metric_col AS metric,\n        PARSE_DATE('%Y-%m-%d', start_col) AS start_date,\n        units_col AS units,\n        CAST(val_col AS BIGNUMERIC) AS value,\n        CAST(cik AS INT64) AS cik\n    FROM quotations_removed\n)\n\n\nSELECT * FROM recast_and_renamed", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "company_facts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.company_facts"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_facts_dei.sql", "compiled": true, "compiled_code": "\n\nWITH\n\nsource AS (\n\nSELECT \n    cik, \n    PARSE_JSON(dei) AS dei, \nFROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_facts`\nWHERE dei != ''\n),\n\narrays AS (\n    SELECT\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.accn) AS accn_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.description) AS description_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.end) AS end_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.filed) AS filed_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.form) AS form_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.fp) AS fp_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.frame) AS frame_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.fy) AS fy_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.label) AS label_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.metric) AS metric_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.start) AS start_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.units) AS units_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(dei.val) AS val_col,\n        \n        cik\n    FROM source\n),\n\n\naccn_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(accn_col) AS num_val\n),\n\ndescription_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(description_col) AS num_val\n),\n\nend_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(end_col) AS num_val\n),\n\nfiled_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(filed_col) AS num_val\n),\n\nform_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(form_col) AS num_val\n),\n\nfp_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(fp_col) AS num_val\n),\n\nframe_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(frame_col) AS num_val\n),\n\nfy_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(fy_col) AS num_val\n),\n\nlabel_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(label_col) AS num_val\n),\n\nmetric_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(metric_col) AS num_val\n),\n\nstart_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(start_col) AS num_val\n),\n\nunits_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(units_col) AS num_val\n),\n\nval_unnested AS (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(val_col) AS num_val\n),\n\n\njoined AS (\n    SELECT\n        \n        accn_unnested.num_val AS accn_col,\n        \n        description_unnested.num_val AS description_col,\n        \n        end_unnested.num_val AS end_col,\n        \n        filed_unnested.num_val AS filed_col,\n        \n        form_unnested.num_val AS form_col,\n        \n        fp_unnested.num_val AS fp_col,\n        \n        frame_unnested.num_val AS frame_col,\n        \n        fy_unnested.num_val AS fy_col,\n        \n        label_unnested.num_val AS label_col,\n        \n        metric_unnested.num_val AS metric_col,\n        \n        start_unnested.num_val AS start_col,\n        \n        units_unnested.num_val AS units_col,\n        \n        val_unnested.num_val AS val_col,\n        \n        accn_unnested.cik\n    FROM accn_unnested\n    \n        INNER JOIN description_unnested ON accn_unnested.row_num = description_unnested.row_num\n    \n        INNER JOIN end_unnested ON accn_unnested.row_num = end_unnested.row_num\n    \n        INNER JOIN filed_unnested ON accn_unnested.row_num = filed_unnested.row_num\n    \n        INNER JOIN form_unnested ON accn_unnested.row_num = form_unnested.row_num\n    \n        INNER JOIN fp_unnested ON accn_unnested.row_num = fp_unnested.row_num\n    \n        INNER JOIN frame_unnested ON accn_unnested.row_num = frame_unnested.row_num\n    \n        INNER JOIN fy_unnested ON accn_unnested.row_num = fy_unnested.row_num\n    \n        INNER JOIN label_unnested ON accn_unnested.row_num = label_unnested.row_num\n    \n        INNER JOIN metric_unnested ON accn_unnested.row_num = metric_unnested.row_num\n    \n        INNER JOIN start_unnested ON accn_unnested.row_num = start_unnested.row_num\n    \n        INNER JOIN units_unnested ON accn_unnested.row_num = units_unnested.row_num\n    \n        INNER JOIN val_unnested ON accn_unnested.row_num = val_unnested.row_num\n    \n    \n),\n\nquotations_removed AS (\n    SELECT\n        \n        REPLACE(accn_col, '\"', '') AS accn_col,\n        \n        REPLACE(description_col, '\"', '') AS description_col,\n        \n        REPLACE(end_col, '\"', '') AS end_col,\n        \n        REPLACE(filed_col, '\"', '') AS filed_col,\n        \n        REPLACE(form_col, '\"', '') AS form_col,\n        \n        REPLACE(fp_col, '\"', '') AS fp_col,\n        \n        REPLACE(frame_col, '\"', '') AS frame_col,\n        \n        REPLACE(fy_col, '\"', '') AS fy_col,\n        \n        REPLACE(label_col, '\"', '') AS label_col,\n        \n        REPLACE(metric_col, '\"', '') AS metric_col,\n        \n        REPLACE(start_col, '\"', '') AS start_col,\n        \n        REPLACE(units_col, '\"', '') AS units_col,\n        \n        REPLACE(val_col, '\"', '') AS val_col,\n        \n        cik\n    FROM joined\n),\n\nnulls_added AS (\n    SELECT\n        \n        CASE\n            WHEN accn_col = 'null' then null\n            ELSE accn_col\n        END AS accn_col,\n        \n        CASE\n            WHEN description_col = 'null' then null\n            ELSE description_col\n        END AS description_col,\n        \n        CASE\n            WHEN end_col = 'null' then null\n            ELSE end_col\n        END AS end_col,\n        \n        CASE\n            WHEN filed_col = 'null' then null\n            ELSE filed_col\n        END AS filed_col,\n        \n        CASE\n            WHEN form_col = 'null' then null\n            ELSE form_col\n        END AS form_col,\n        \n        CASE\n            WHEN fp_col = 'null' then null\n            ELSE fp_col\n        END AS fp_col,\n        \n        CASE\n            WHEN frame_col = 'null' then null\n            ELSE frame_col\n        END AS frame_col,\n        \n        CASE\n            WHEN fy_col = 'null' then null\n            ELSE fy_col\n        END AS fy_col,\n        \n        CASE\n            WHEN label_col = 'null' then null\n            ELSE label_col\n        END AS label_col,\n        \n        CASE\n            WHEN metric_col = 'null' then null\n            ELSE metric_col\n        END AS metric_col,\n        \n        CASE\n            WHEN start_col = 'null' then null\n            ELSE start_col\n        END AS start_col,\n        \n        CASE\n            WHEN units_col = 'null' then null\n            ELSE units_col\n        END AS units_col,\n        \n        CASE\n            WHEN val_col = 'null' then null\n            ELSE val_col\n        END AS val_col,\n        \n        cik\n    FROM quotations_removed\n),\n\nrecast_and_renamed AS (\n    SELECT\n        TO_HEX(SHA1(accn_col || start_col || end_col || metric_col)) AS metric_id,\n        accn_col AS accession_number,\n        description_col AS description,\n        PARSE_DATE('%Y-%m-%d', end_col) AS end_date,\n        PARSE_DATE('%Y-%m-%d', filed_col) AS filed_date,\n        form_col AS form,\n        fp_col AS fiscal_period,\n        frame_col AS frame,\n        CAST(fy_col AS INT64) AS fiscal_year,\n        label_col AS label,\n        metric_col AS metric,\n        PARSE_DATE('%Y-%m-%d', start_col) AS start_date,\n        units_col AS units,\n        CAST(val_col AS BIGNUMERIC) AS value,\n        CAST(cik AS INT64) AS cik\n    FROM quotations_removed\n)\n\n\nSELECT * FROM recast_and_renamed", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__company_tickers": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_tickers", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_tickers.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_tickers.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_tickers", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_tickers"], "alias": "company_tickers", "checksum": {"name": "sha256", "checksum": "35f08bd24d1b2a1c202bb499de0ad8b303fd80b3de3e301f99a64c549972f4dc"}, "config": {"enabled": true, "alias": "company_tickers", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains meta data about companies e.g. description, EIN, state of incorporation, etc.", "columns": {"ticker_id": {"name": "ticker_id", "description": "The primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "company_tickers"}, "created_at": 1678410503.8980477, "relation_name": "`sbx-1-sec-edgar`.`refined`.`company_tickers`", "raw_code": "WITH\n\ntickers_arr AS (\n  SELECT cik, JSON_EXTRACT_ARRAY(PARSE_JSON(tickers)) AS tickers FROM {{ source('sec_edgar_raw', 'recent_submissions') }}\n),\n\ntickers_expanded AS (\n  SELECT cik, tickers FROM tickers_arr, UNNEST(tickers) AS tickers\n),\n\nrecast AS (\n  SELECT\n    TO_HEX(SHA1(cik || JSON_EXTRACT_SCALAR(tickers))) AS ticker_id,\n    CAST(cik AS INT64) AS cik,\n    JSON_EXTRACT_SCALAR(tickers) AS tickers,\n  FROM tickers_expanded\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "recent_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_tickers.sql", "compiled": true, "compiled_code": "WITH\n\ntickers_arr AS (\n  SELECT cik, JSON_EXTRACT_ARRAY(PARSE_JSON(tickers)) AS tickers FROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_recent`\n),\n\ntickers_expanded AS (\n  SELECT cik, tickers FROM tickers_arr, UNNEST(tickers) AS tickers\n),\n\nrecast AS (\n  SELECT\n    TO_HEX(SHA1(cik || JSON_EXTRACT_SCALAR(tickers))) AS ticker_id,\n    CAST(cik AS INT64) AS cik,\n    JSON_EXTRACT_SCALAR(tickers) AS tickers,\n  FROM tickers_expanded\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__company_addresses": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_addresses", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_addresses.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_addresses.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_addresses", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_addresses"], "alias": "company_adresses", "checksum": {"name": "sha256", "checksum": "9a282f22b0e5321c6496652fc97b09e35c8940547e6bb8a92bcb4535dd7d33b9"}, "config": {"enabled": true, "alias": "company_adresses", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Address(es) of publicly traded companies", "columns": {"address_id": {"name": "address_id", "description": "The primary key for this table. It assumes each row has a unique CIK and address_type combination.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "company_adresses"}, "created_at": 1678410503.849452, "relation_name": "`sbx-1-sec-edgar`.`refined`.`company_adresses`", "raw_code": "WITH\n\naddresses_json AS (\n  SELECT cik, PARSE_JSON(addresses) AS addresses FROM {{ source('sec_edgar_raw', 'recent_submissions') }}\n),\n\nbusiness_address AS (\n  SELECT\n    CAST(cik AS INT64) AS cik,\n    TO_HEX(SHA1(cik || 'business')) AS address_id,\n    JSON_EXTRACT_SCALAR(addresses.business.street1) AS street1,\n    JSON_EXTRACT_SCALAR(addresses.business.street2) AS street2,\n    JSON_EXTRACT_SCALAR(addresses.business.city) AS city,\n    JSON_EXTRACT_SCALAR(addresses.business.stateOrCounty) AS state_or_county,\n    JSON_EXTRACT_SCALAR(addresses.business.zipCode) AS zip_code,\n    JSON_EXTRACT_SCALAR(addresses.business.stateOrCountryDescription) AS state_or_country_description,\n    'business' AS address_type\n\n  FROM addresses_json\n),\n\nmailing_address AS (\n  SELECT\n    \n    CAST(cik AS INT64) AS cik,\n    TO_HEX(SHA1(cik || 'mailing')) AS address_id,\n    JSON_EXTRACT_SCALAR(addresses.mailing.street1) AS street1,\n    JSON_EXTRACT_SCALAR(addresses.mailing.street2) AS street2,\n    JSON_EXTRACT_SCALAR(addresses.mailing.city) AS city,\n    JSON_EXTRACT_SCALAR(addresses.mailing.stateOrCounty) AS state_or_county,\n    JSON_EXTRACT_SCALAR(addresses.mailing.zipCode) AS zip_code,\n    JSON_EXTRACT_SCALAR(addresses.mailing.stateOrCountryDescription) AS state_or_country_description,\n    'mailing' AS address_type\n\n  FROM addresses_json\n),\n\ncombined AS (\n  SELECT * FROM business_address\n  UNION ALL\n  SELECT * FROM mailing_address\n)\n\nSELECT * FROM combined", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "recent_submissions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_addresses.sql", "compiled": true, "compiled_code": "WITH\n\naddresses_json AS (\n  SELECT cik, PARSE_JSON(addresses) AS addresses FROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_recent`\n),\n\nbusiness_address AS (\n  SELECT\n    CAST(cik AS INT64) AS cik,\n    TO_HEX(SHA1(cik || 'business')) AS address_id,\n    JSON_EXTRACT_SCALAR(addresses.business.street1) AS street1,\n    JSON_EXTRACT_SCALAR(addresses.business.street2) AS street2,\n    JSON_EXTRACT_SCALAR(addresses.business.city) AS city,\n    JSON_EXTRACT_SCALAR(addresses.business.stateOrCounty) AS state_or_county,\n    JSON_EXTRACT_SCALAR(addresses.business.zipCode) AS zip_code,\n    JSON_EXTRACT_SCALAR(addresses.business.stateOrCountryDescription) AS state_or_country_description,\n    'business' AS address_type\n\n  FROM addresses_json\n),\n\nmailing_address AS (\n  SELECT\n    \n    CAST(cik AS INT64) AS cik,\n    TO_HEX(SHA1(cik || 'mailing')) AS address_id,\n    JSON_EXTRACT_SCALAR(addresses.mailing.street1) AS street1,\n    JSON_EXTRACT_SCALAR(addresses.mailing.street2) AS street2,\n    JSON_EXTRACT_SCALAR(addresses.mailing.city) AS city,\n    JSON_EXTRACT_SCALAR(addresses.mailing.stateOrCounty) AS state_or_county,\n    JSON_EXTRACT_SCALAR(addresses.mailing.zipCode) AS zip_code,\n    JSON_EXTRACT_SCALAR(addresses.mailing.stateOrCountryDescription) AS state_or_country_description,\n    'mailing' AS address_type\n\n  FROM addresses_json\n),\n\ncombined AS (\n  SELECT * FROM business_address\n  UNION ALL\n  SELECT * FROM mailing_address\n)\n\nSELECT * FROM combined", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__ticker_stream": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__ticker_stream", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__ticker_stream.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__ticker_stream.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__ticker_stream", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__ticker_stream"], "alias": "cik_ticker_mapping", "checksum": {"name": "sha256", "checksum": "b7447c43fc0cd524f536395bd4d43f42b61eea137da31d040808b6105fb81fb8"}, "config": {"enabled": true, "alias": "cik_ticker_mapping", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains meta data about companies e.g. description, EIN, state of incorporation, etc.", "columns": {"cik": {"name": "cik", "description": "The primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "cik_ticker_mapping"}, "created_at": 1678410503.9037838, "relation_name": "`sbx-1-sec-edgar`.`refined`.`cik_ticker_mapping`", "raw_code": "WITH\n\nrecast AS (\n    SELECT\n        symbol,\n        CAST(cik as INT64) as cik,\n        {{ format_jefferson_street_ingest_time() }} AS ingest_time\n    \n    FROM {{ source('sec_edgar_raw', 'ticker_cik_mapping') }}\n)\n\nSELECT * FROM recast", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "ticker_cik_mapping"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.format_jefferson_street_ingest_time"], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.ticker_cik_mapping"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__ticker_stream.sql", "compiled": true, "compiled_code": "WITH\n\nrecast AS (\n    SELECT\n        symbol,\n        CAST(cik as INT64) as cik,\n        \nCAST(jefferson_street_ingest_datetime as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n AS ingest_time\n    \n    FROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_ticker_stream`\n)\n\nSELECT * FROM recast", "extra_ctes_injected": true, "extra_ctes": []}, "seed.jefferson_street_dbt.gdp": {"database": "sbx-1-fred", "schema": "external", "name": "gdp", "resource_type": "seed", "package_name": "jefferson_street_dbt", "path": "fred/gdp.csv", "original_file_path": "seeds/fred/gdp.csv", "unique_id": "seed.jefferson_street_dbt.gdp", "fqn": ["jefferson_street_dbt", "fred", "gdp"], "alias": "gdp", "checksum": {"name": "sha256", "checksum": "b83bd2370fc5522c8f34c0fff3a99f5d2bf3325e91aadda16f5ec00238fb3b92"}, "config": {"enabled": true, "alias": null, "schema": "external", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "external", "database": "sbx-1-fred"}, "created_at": 1678410503.4916222, "relation_name": "`sbx-1-fred`.`external`.`gdp`", "raw_code": "", "root_path": "/home/mahfuj/Monorepo/dbt"}, "seed.jefferson_street_dbt.state_mappings": {"database": "sbx-1-fred", "schema": "external", "name": "state_mappings", "resource_type": "seed", "package_name": "jefferson_street_dbt", "path": "fred/state_mappings.csv", "original_file_path": "seeds/fred/state_mappings.csv", "unique_id": "seed.jefferson_street_dbt.state_mappings", "fqn": ["jefferson_street_dbt", "fred", "state_mappings"], "alias": "state_mappings", "checksum": {"name": "sha256", "checksum": "c486634412d2570d936de1be87f98597aa6f85acc4286f11a60357d9258b9dc6"}, "config": {"enabled": true, "alias": null, "schema": "external", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Relates category IDs of US states and territories to other geographic category IDs e.g. counties, regions.", "columns": {"american_state_id": {"name": "american_state_id", "description": "Category IDs corresponding to the American states and territories", "meta": {}, "data_type": null, "quote": null, "tags": []}, "county_parent_id": {"name": "county_parent_id", "description": "Category IDs where the children of each ID are other category IDs representing all of the *counties* in a US state or territory.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "msa_parent_id": {"name": "msa_parent_id", "description": "Category IDs where the children of each ID are other category IDs representing all of the *metropolitan statistical areas (MSAs)* in a US state or territory.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bea_region_id": {"name": "bea_region_id", "description": "Category IDs corresponding to regions defined by the Bureau of Economic Analysis (BEA)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://seeds/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "external", "database": "sbx-1-fred", "enabled": true}, "created_at": 1678410503.5951352, "relation_name": "`sbx-1-fred`.`external`.`state_mappings`", "raw_code": "", "root_path": "/home/mahfuj/Monorepo/dbt"}, "seed.jefferson_street_dbt.gdp_depr": {"database": "sbx-1-fred", "schema": "external", "name": "gdp_depr", "resource_type": "seed", "package_name": "jefferson_street_dbt", "path": "fred/gdp_depr.csv", "original_file_path": "seeds/fred/gdp_depr.csv", "unique_id": "seed.jefferson_street_dbt.gdp_depr", "fqn": ["jefferson_street_dbt", "fred", "gdp_depr"], "alias": "gdp_depr", "checksum": {"name": "sha256", "checksum": "baf7a92dddb20650d6d69844f7adb3f111fa411309149945b79b90af8ba9c462"}, "config": {"enabled": true, "alias": null, "schema": "external", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "external", "database": "sbx-1-fred"}, "created_at": 1678410503.5008254, "relation_name": "`sbx-1-fred`.`external`.`gdp_depr`", "raw_code": "", "root_path": "/home/mahfuj/Monorepo/dbt"}, "seed.jefferson_street_dbt.gdp_with_country": {"database": "sbx-1-fred", "schema": "external", "name": "gdp_with_country", "resource_type": "seed", "package_name": "jefferson_street_dbt", "path": "fred/gdp_with_country.csv", "original_file_path": "seeds/fred/gdp_with_country.csv", "unique_id": "seed.jefferson_street_dbt.gdp_with_country", "fqn": ["jefferson_street_dbt", "fred", "gdp_with_country"], "alias": "gdp_with_country", "checksum": {"name": "sha256", "checksum": "ff2bd3e5be9cfcdf68d6cd223c5445b1bee7bf2f7354eef935a0e0c605ce383c"}, "config": {"enabled": true, "alias": null, "schema": "external", "database": "sbx-1-fred", "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "external", "database": "sbx-1-fred"}, "created_at": 1678410503.5060647, "relation_name": "`sbx-1-fred`.`external`.`gdp_with_country`", "raw_code": "", "root_path": "/home/mahfuj/Monorepo/dbt"}, "test.jefferson_street_dbt.unique_md_fred__series_continuity_series_id.a43ee5d50d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('md_fred__series_continuity')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_md_fred__series_continuity_series_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_md_fred__series_continuity_series_id.sql", "original_file_path": "models/staging/fred/meta_data/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_md_fred__series_continuity_series_id.a43ee5d50d", "fqn": ["jefferson_street_dbt", "staging", "fred", "meta_data", "unique_md_fred__series_continuity_series_id"], "alias": "unique_md_fred__series_continuity_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.7026222, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["md_fred__series_continuity"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.md_fred__series_continuity"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/meta_data/schema.yml/unique_md_fred__series_continuity_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select series_id as unique_field\n  from `sbx-1-fred`.`meta_data`.`series_continuity`\n  where series_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "series_id", "file_key_name": "models.md_fred__series_continuity"}, "test.jefferson_street_dbt.unique_md_fred__series_completeness_series_id.1e2a427f1d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('md_fred__series_completeness')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_md_fred__series_completeness_series_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_md_fred__series_completeness_series_id.sql", "original_file_path": "models/staging/fred/meta_data/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_md_fred__series_completeness_series_id.1e2a427f1d", "fqn": ["jefferson_street_dbt", "staging", "fred", "meta_data", "unique_md_fred__series_completeness_series_id"], "alias": "unique_md_fred__series_completeness_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.706565, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["md_fred__series_completeness"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.md_fred__series_completeness"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/meta_data/schema.yml/unique_md_fred__series_completeness_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select series_id as unique_field\n  from `sbx-1-fred`.`meta_data`.`series_completeness`\n  where series_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "series_id", "file_key_name": "models.md_fred__series_completeness"}, "test.jefferson_street_dbt.unique_dd_fred__observations_revised_observation_id.35763d6c6a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "observation_id", "model": "{{ get_where_subquery(ref('dd_fred__observations_revised')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_dd_fred__observations_revised_observation_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_dd_fred__observations_revised_observation_id.sql", "original_file_path": "models/staging/fred/de_duped/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_dd_fred__observations_revised_observation_id.35763d6c6a", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "unique_dd_fred__observations_revised_observation_id"], "alias": "unique_dd_fred__observations_revised_observation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.7538552, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dd_fred__observations_revised"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.dd_fred__observations_revised"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/schema.yml/unique_dd_fred__observations_revised_observation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select observation_id as unique_field\n  from `sbx-1-fred`.`de_duped`.`observations_revised`\n  where observation_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "observation_id", "file_key_name": "models.dd_fred__observations_revised"}, "test.jefferson_street_dbt.unique_dd_fred__observations_unrevised_observation_id.33301dad18": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "observation_id", "model": "{{ get_where_subquery(ref('dd_fred__observations_unrevised')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_dd_fred__observations_unrevised_observation_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_dd_fred__observations_unrevised_observation_id.sql", "original_file_path": "models/staging/fred/de_duped/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_dd_fred__observations_unrevised_observation_id.33301dad18", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "unique_dd_fred__observations_unrevised_observation_id"], "alias": "unique_dd_fred__observations_unrevised_observation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.7576776, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dd_fred__observations_unrevised"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.dd_fred__observations_unrevised"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/schema.yml/unique_dd_fred__observations_unrevised_observation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select observation_id as unique_field\n  from `sbx-1-fred`.`de_duped`.`observations_unrevised`\n  where observation_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "observation_id", "file_key_name": "models.dd_fred__observations_unrevised"}, "test.jefferson_street_dbt.unique_dd_fred__observations_observation_id.bfd1be5a05": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "observation_id", "model": "{{ get_where_subquery(ref('dd_fred__observations')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_dd_fred__observations_observation_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_dd_fred__observations_observation_id.sql", "original_file_path": "models/staging/fred/de_duped/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_dd_fred__observations_observation_id.bfd1be5a05", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "unique_dd_fred__observations_observation_id"], "alias": "unique_dd_fred__observations_observation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.7613282, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dd_fred__observations"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.dd_fred__observations"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/schema.yml/unique_dd_fred__observations_observation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select observation_id as unique_field\n  from `sbx-1-fred`.`de_duped`.`observations`\n  where observation_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "observation_id", "file_key_name": "models.dd_fred__observations"}, "test.jefferson_street_dbt.unique_dd_fred__release_dates_release_date_id.0aeead699b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "release_date_id", "model": "{{ get_where_subquery(ref('dd_fred__release_dates')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_dd_fred__release_dates_release_date_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_dd_fred__release_dates_release_date_id.sql", "original_file_path": "models/staging/fred/de_duped/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_dd_fred__release_dates_release_date_id.0aeead699b", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "unique_dd_fred__release_dates_release_date_id"], "alias": "unique_dd_fred__release_dates_release_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.7650304, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dd_fred__release_dates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.dd_fred__release_dates"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/schema.yml/unique_dd_fred__release_dates_release_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select release_date_id as unique_field\n  from `sbx-1-fred`.`de_duped`.`release_dates`\n  where release_date_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "release_date_id", "file_key_name": "models.dd_fred__release_dates"}, "test.jefferson_street_dbt.unique_dd_fred__release_series_series_id.b43dd759fd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('dd_fred__release_series')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_dd_fred__release_series_series_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_dd_fred__release_series_series_id.sql", "original_file_path": "models/staging/fred/de_duped/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_dd_fred__release_series_series_id.b43dd759fd", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "unique_dd_fred__release_series_series_id"], "alias": "unique_dd_fred__release_series_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.768958, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dd_fred__release_series"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.dd_fred__release_series"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/schema.yml/unique_dd_fred__release_series_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select series_id as unique_field\n  from `sbx-1-fred`.`de_duped`.`series_meta`\n  where series_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "series_id", "file_key_name": "models.dd_fred__release_series"}, "test.jefferson_street_dbt.unique_dd_fred__series_categories_category_unique_id.a991da4730": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "category_unique_id", "model": "{{ get_where_subquery(ref('dd_fred__series_categories')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_dd_fred__series_categories_category_unique_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_dd_fred__series_categories_category_unique_id.sql", "original_file_path": "models/staging/fred/de_duped/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_dd_fred__series_categories_category_unique_id.a991da4730", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "unique_dd_fred__series_categories_category_unique_id"], "alias": "unique_dd_fred__series_categories_category_unique_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.773429, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dd_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.dd_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/schema.yml/unique_dd_fred__series_categories_category_unique_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select category_unique_id as unique_field\n  from `sbx-1-fred`.`de_duped`.`categories`\n  where category_unique_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_unique_id", "file_key_name": "models.dd_fred__series_categories"}, "test.jefferson_street_dbt.unique_dd_fred__series_tags_tag_id.624bc7ce77": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('dd_fred__series_tags')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_dd_fred__series_tags_tag_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_dd_fred__series_tags_tag_id.sql", "original_file_path": "models/staging/fred/de_duped/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_dd_fred__series_tags_tag_id.624bc7ce77", "fqn": ["jefferson_street_dbt", "staging", "fred", "de_duped", "unique_dd_fred__series_tags_tag_id"], "alias": "unique_dd_fred__series_tags_tag_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.7771237, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dd_fred__series_tags"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.dd_fred__series_tags"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/de_duped/schema.yml/unique_dd_fred__series_tags_tag_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select tag_id as unique_field\n  from `sbx-1-fred`.`de_duped`.`tags`\n  where tag_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "tag_id", "file_key_name": "models.dd_fred__series_tags"}, "test.jefferson_street_dbt.not_null_rr_fred__observations_revised_observation_id.39bdf24e91": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_id", "model": "{{ get_where_subquery(ref('rr_fred__observations_revised')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_rr_fred__observations_revised_observation_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_rr_fred__observations_revised_observation_id.sql", "original_file_path": "models/staging/fred/recast_renamed/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_rr_fred__observations_revised_observation_id.39bdf24e91", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "not_null_rr_fred__observations_revised_observation_id"], "alias": "not_null_rr_fred__observations_revised_observation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.8212597, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["rr_fred__observations_revised"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.rr_fred__observations_revised"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/schema.yml/not_null_rr_fred__observations_revised_observation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect observation_id\nfrom `sbx-1-fred`.`recast_renamed`.`observations_revised`\nwhere observation_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "observation_id", "file_key_name": "models.rr_fred__observations_revised"}, "test.jefferson_street_dbt.not_null_rr_fred__observations_unrevised_observation_id.ac8b860a09": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_id", "model": "{{ get_where_subquery(ref('rr_fred__observations_unrevised')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_rr_fred__observations_unrevised_observation_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_rr_fred__observations_unrevised_observation_id.sql", "original_file_path": "models/staging/fred/recast_renamed/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_rr_fred__observations_unrevised_observation_id.ac8b860a09", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "not_null_rr_fred__observations_unrevised_observation_id"], "alias": "not_null_rr_fred__observations_unrevised_observation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.8249648, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["rr_fred__observations_unrevised"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.rr_fred__observations_unrevised"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/schema.yml/not_null_rr_fred__observations_unrevised_observation_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect observation_id\nfrom `sbx-1-fred`.`recast_renamed`.`observations_unrevised`\nwhere observation_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "observation_id", "file_key_name": "models.rr_fred__observations_unrevised"}, "test.jefferson_street_dbt.not_null_rr_fred__release_dates_release_date_id.c1dd959c90": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "release_date_id", "model": "{{ get_where_subquery(ref('rr_fred__release_dates')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_rr_fred__release_dates_release_date_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_rr_fred__release_dates_release_date_id.sql", "original_file_path": "models/staging/fred/recast_renamed/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_rr_fred__release_dates_release_date_id.c1dd959c90", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "not_null_rr_fred__release_dates_release_date_id"], "alias": "not_null_rr_fred__release_dates_release_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.8287523, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["rr_fred__release_dates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.rr_fred__release_dates"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/schema.yml/not_null_rr_fred__release_dates_release_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect release_date_id\nfrom `sbx-1-fred`.`recast_renamed`.`release_dates`\nwhere release_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "release_date_id", "file_key_name": "models.rr_fred__release_dates"}, "test.jefferson_street_dbt.not_null_rr_fred__release_series_series_id.079bd8b6ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('rr_fred__release_series')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_rr_fred__release_series_series_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_rr_fred__release_series_series_id.sql", "original_file_path": "models/staging/fred/recast_renamed/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_rr_fred__release_series_series_id.079bd8b6ff", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "not_null_rr_fred__release_series_series_id"], "alias": "not_null_rr_fred__release_series_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.832525, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["rr_fred__release_series"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.rr_fred__release_series"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/schema.yml/not_null_rr_fred__release_series_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect series_id\nfrom `sbx-1-fred`.`recast_renamed`.`series_meta`\nwhere series_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "series_id", "file_key_name": "models.rr_fred__release_series"}, "test.jefferson_street_dbt.not_null_rr_fred__series_categories_category_unique_id.7fb7ac409d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_unique_id", "model": "{{ get_where_subquery(ref('rr_fred__series_categories')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_rr_fred__series_categories_category_unique_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_rr_fred__series_categories_category_unique_id.sql", "original_file_path": "models/staging/fred/recast_renamed/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_rr_fred__series_categories_category_unique_id.7fb7ac409d", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "not_null_rr_fred__series_categories_category_unique_id"], "alias": "not_null_rr_fred__series_categories_category_unique_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.8364494, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["rr_fred__series_categories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.rr_fred__series_categories"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/schema.yml/not_null_rr_fred__series_categories_category_unique_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category_unique_id\nfrom `sbx-1-fred`.`recast_renamed`.`categories`\nwhere category_unique_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_unique_id", "file_key_name": "models.rr_fred__series_categories"}, "test.jefferson_street_dbt.not_null_rr_fred__series_tags_tag_id.78eb17cd27": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('rr_fred__series_tags')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_rr_fred__series_tags_tag_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_rr_fred__series_tags_tag_id.sql", "original_file_path": "models/staging/fred/recast_renamed/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_rr_fred__series_tags_tag_id.78eb17cd27", "fqn": ["jefferson_street_dbt", "staging", "fred", "recast_renamed", "not_null_rr_fred__series_tags_tag_id"], "alias": "not_null_rr_fred__series_tags_tag_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.8407962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["rr_fred__series_tags"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.rr_fred__series_tags"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/fred/recast_renamed/schema.yml/not_null_rr_fred__series_tags_tag_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tag_id\nfrom `sbx-1-fred`.`recast_renamed`.`tags`\nwhere tag_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "tag_id", "file_key_name": "models.rr_fred__series_tags"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_addresses_address_id.2b25b2052c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "address_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_addresses')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_addresses_address_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company_addresses_address_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_addresses_address_id.2b25b2052c", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_addresses_address_id"], "alias": "unique_stg_sec_edgar__company_addresses_address_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9058762, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_addresses"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_addresses"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company_addresses_address_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select address_id as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`company_adresses`\n  where address_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "address_id", "file_key_name": "models.stg_sec_edgar__company_addresses"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_addresses_address_id.2999203aef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_addresses')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_addresses_address_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__company_addresses_address_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_addresses_address_id.2999203aef", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_addresses_address_id"], "alias": "not_null_stg_sec_edgar__company_addresses_address_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9094892, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_addresses"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_addresses"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__company_addresses_address_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom `sbx-1-sec-edgar`.`refined`.`company_adresses`\nwhere address_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "address_id", "file_key_name": "models.stg_sec_edgar__company_addresses"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_dei_metric_id.42d9390639": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "metric_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_facts_dei')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_facts_dei_metric_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company_facts_dei_metric_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_dei_metric_id.42d9390639", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_facts_dei_metric_id"], "alias": "unique_stg_sec_edgar__company_facts_dei_metric_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9138079, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_facts_dei"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company_facts_dei_metric_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select metric_id as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`dei_metrics`\n  where metric_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "metric_id", "file_key_name": "models.stg_sec_edgar__company_facts_dei"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_dei_metric_id.9ce2008275": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_facts_dei')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_facts_dei_metric_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__company_facts_dei_metric_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_dei_metric_id.9ce2008275", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_facts_dei_metric_id"], "alias": "not_null_stg_sec_edgar__company_facts_dei_metric_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9174483, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_facts_dei"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__company_facts_dei_metric_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric_id\nfrom `sbx-1-sec-edgar`.`refined`.`dei_metrics`\nwhere metric_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "metric_id", "file_key_name": "models.stg_sec_edgar__company_facts_dei"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_us_gaap_metric_id.64d52e6d26": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "metric_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_facts_us_gaap')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_facts_us_gaap_metric_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company_facts_us_gaap_metric_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_us_gaap_metric_id.64d52e6d26", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_facts_us_gaap_metric_id"], "alias": "unique_stg_sec_edgar__company_facts_us_gaap_metric_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9219334, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_facts_us_gaap"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company_facts_us_gaap_metric_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select metric_id as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`gaap_metrics`\n  where metric_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "metric_id", "file_key_name": "models.stg_sec_edgar__company_facts_us_gaap"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_us_gaap_metric_id.0c7476e54a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "metric_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_facts_us_gaap')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_facts_us_gaap_metric_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__company_facts_us_gaap_metric_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_us_gaap_metric_id.0c7476e54a", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_facts_us_gaap_metric_id"], "alias": "not_null_stg_sec_edgar__company_facts_us_gaap_metric_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.925984, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_facts_us_gaap"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__company_facts_us_gaap_metric_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect metric_id\nfrom `sbx-1-sec-edgar`.`refined`.`gaap_metrics`\nwhere metric_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "metric_id", "file_key_name": "models.stg_sec_edgar__company_facts_us_gaap"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_former_names_company_name_id.380772e247": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "company_name_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_former_names')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_former_names_company_name_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company_former_names_company_name_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_former_names_company_name_id.380772e247", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_former_names_company_name_id"], "alias": "unique_stg_sec_edgar__company_former_names_company_name_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9297895, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_former_names"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_former_names"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company_former_names_company_name_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select company_name_id as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`company_former_names`\n  where company_name_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "company_name_id", "file_key_name": "models.stg_sec_edgar__company_former_names"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_former_names_company_name_id.b42a2182fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_name_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_former_names')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_former_names_company_name_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__company_former_names_company_name_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_former_names_company_name_id.b42a2182fd", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_former_names_company_name_id"], "alias": "not_null_stg_sec_edgar__company_former_names_company_name_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9340901, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_former_names"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_former_names"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__company_former_names_company_name_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect company_name_id\nfrom `sbx-1-sec-edgar`.`refined`.`company_former_names`\nwhere company_name_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "company_name_id", "file_key_name": "models.stg_sec_edgar__company_former_names"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_meta_cik.6838acc1a3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "cik", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_meta')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_meta_cik", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company_meta_cik.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_meta_cik.6838acc1a3", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_meta_cik"], "alias": "unique_stg_sec_edgar__company_meta_cik", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9383245, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_meta"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_meta"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company_meta_cik.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cik as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`company_meta`\n  where cik is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cik", "file_key_name": "models.stg_sec_edgar__company_meta"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_meta_cik.4e6cd34c6b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cik", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_meta')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_meta_cik", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__company_meta_cik.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_meta_cik.4e6cd34c6b", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_meta_cik"], "alias": "not_null_stg_sec_edgar__company_meta_cik", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9421763, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_meta"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_meta"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__company_meta_cik.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cik\nfrom `sbx-1-sec-edgar`.`refined`.`company_meta`\nwhere cik is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cik", "file_key_name": "models.stg_sec_edgar__company_meta"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_tickers_ticker_id.bd629b3a85": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ticker_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_tickers')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_tickers_ticker_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company_tickers_ticker_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_tickers_ticker_id.bd629b3a85", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_tickers_ticker_id"], "alias": "unique_stg_sec_edgar__company_tickers_ticker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9629285, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_tickers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_tickers"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company_tickers_ticker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select ticker_id as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`company_tickers`\n  where ticker_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ticker_id", "file_key_name": "models.stg_sec_edgar__company_tickers"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_tickers_ticker_id.397108271b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticker_id", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_tickers')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_tickers_ticker_id", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__company_tickers_ticker_id.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_tickers_ticker_id.397108271b", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_tickers_ticker_id"], "alias": "not_null_stg_sec_edgar__company_tickers_ticker_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.968058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__company_tickers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_tickers"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__company_tickers_ticker_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticker_id\nfrom `sbx-1-sec-edgar`.`refined`.`company_tickers`\nwhere ticker_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ticker_id", "file_key_name": "models.stg_sec_edgar__company_tickers"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__ticker_stream_cik.2a0d68c8ca": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "cik", "model": "{{ get_where_subquery(ref('stg_sec_edgar__ticker_stream')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__ticker_stream_cik", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__ticker_stream_cik.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__ticker_stream_cik.2a0d68c8ca", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__ticker_stream_cik"], "alias": "unique_stg_sec_edgar__ticker_stream_cik", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.9722412, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__ticker_stream"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__ticker_stream"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__ticker_stream_cik.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cik as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`cik_ticker_mapping`\n  where cik is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cik", "file_key_name": "models.stg_sec_edgar__ticker_stream"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__ticker_stream_cik.3ffa2af384": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cik", "model": "{{ get_where_subquery(ref('stg_sec_edgar__ticker_stream')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__ticker_stream_cik", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__ticker_stream_cik.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__ticker_stream_cik.3ffa2af384", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__ticker_stream_cik"], "alias": "not_null_stg_sec_edgar__ticker_stream_cik", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678410503.976408, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sec_edgar__ticker_stream"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__ticker_stream"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__ticker_stream_cik.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cik\nfrom `sbx-1-sec-edgar`.`refined`.`cik_ticker_mapping`\nwhere cik is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cik", "file_key_name": "models.stg_sec_edgar__ticker_stream"}, "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_submissions_recent", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_submissions_recent.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_submissions_recent.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_submissions_recent"], "alias": "company_recent_submissions", "checksum": {"name": "sha256", "checksum": "3adac77c3ee8a931550af37040ee5187342cdd04451a6d099c3536501ae80585"}, "config": {"enabled": true, "alias": "company_recent_submissions", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains the last 1000 filings for each company in the EDGAR database.", "columns": {"accession_number": {"name": "accession_number", "description": "The primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "company_recent_submissions"}, "created_at": 1678414468.4317207, "relation_name": "`sbx-1-sec-edgar`.`refined`.`company_recent_submissions`", "raw_code": "WITH\n\nfilings_info AS (\n\nSELECT cik, PARSE_JSON(filings).recent FROM {{ source('sec_edgar_raw', 'recent_submissions') }}\n),\n\narrays AS (\n  SELECT \n    cik, \n    JSON_EXTRACT_ARRAY(recent.accessionNumber) AS accession_number,\n    JSON_EXTRACT_ARRAY(recent.acceptanceDateTime) AS acceptance_datetime,\n    JSON_EXTRACT_ARRAY(recent.filingDate) AS filing_date,\n    JSON_EXTRACT_ARRAY(recent.reportDate) AS report_date,\n    JSON_EXTRACT_ARRAY(recent.form) AS form,\n    JSON_EXTRACT_ARRAY(recent.fileNumber) AS file_number,\n    JSON_EXTRACT_ARRAY(recent.filmNumber) AS film_number,\n    JSON_EXTRACT_ARRAY(recent.isInlineXBRL) AS is_inline_XBRL,\n    JSON_EXTRACT_ARRAY(recent.isXBRL) AS is_XBRL,\n    JSON_EXTRACT_ARRAY(recent.primaryDocDescription) AS primary_doc_description\n\n    FROM filings_info\n),\n\naccession_number AS ({{ unnest_json_array('accession_number',  'arrays') }}),\n\nacceptance_datetime AS ({{ unnest_json_array('acceptance_datetime',  'arrays') }}),\n\nfiling_date AS ({{ unnest_json_array('filing_date',  'arrays') }}),\n\nreport_date AS ({{ unnest_json_array('report_date',  'arrays') }}),\n\nform AS ({{ unnest_json_array('form',  'arrays') }}),\n\nfile_number AS ({{ unnest_json_array('file_number',  'arrays') }}),\n\nfilm_number AS ({{ unnest_json_array('film_number',  'arrays') }}),\n\nis_inline_XBRL AS ({{ unnest_json_array('is_inline_XBRL',  'arrays') }}),\n\nis_XBRL AS ({{ unnest_json_array('is_XBRL',  'arrays') }}),\n\nprimary_doc_description AS ({{ unnest_json_array('primary_doc_description',  'arrays') }}),\n\njoined AS (\n    \n    SELECT\n        accession_number.cik,\n        accession_number.val AS accession_number,\n        acceptance_datetime.val AS acceptance_datetime,\n        filing_date.val AS filing_date,\n        report_date.val AS report_date,\n        form.val AS form,\n        file_number.val AS file_number,\n        film_number.val AS film_number,\n        is_inline_XBRL.val AS is_inline_XBRL,\n        is_XBRL.val AS is_XBRL,\n        primary_doc_description.val AS primary_doc_description\n    FROM accession_number\n    INNER JOIN acceptance_datetime ON accession_number.row_num = acceptance_datetime.row_num\n    INNER JOIN filing_date ON accession_number.row_num = filing_date.row_num\n    INNER JOIN report_date ON accession_number.row_num = report_date.row_num\n    INNER JOIN form ON accession_number.row_num = form.row_num\n    INNER JOIN file_number ON accession_number.row_num = file_number.row_num\n    INNER JOIN film_number ON accession_number.row_num = film_number.row_num\n    INNER JOIN is_inline_XBRL ON accession_number.row_num = is_inline_XBRL.row_num\n    INNER JOIN is_XBRL ON accession_number.row_num = is_XBRL.row_num\n    INNER JOIN primary_doc_description ON accession_number.row_num = primary_doc_description.row_num\n),\n\ncast_to_correct_types AS (\n\n    SELECT\n        CAST(cik AS INT64) AS cik,\n        STRING(accession_number) AS accession_number,\n        CAST(STRING(acceptance_datetime) AS TIMESTAMP) AS acceptance_datetime,\n        CAST(STRING(filing_date) AS DATE) AS filing_date,\n        CASE\n            WHEN STRING(report_date)='' THEN NULL\n            ELSE CAST(STRING(report_date) AS DATE)\n        END AS report_date,\n        STRING(form) AS form,\n        STRING(file_number) AS file_number,\n        STRING(film_number) AS film_number,\n        CAST(INT64(is_inline_XBRL) AS BOOL) AS is_inline_XBRL,\n        CAST(INT64(is_XBRL) AS BOOL) AS is_XBRL,\n        STRING(primary_doc_description) AS primary_doc_description\n    FROM joined\n)\n\nSELECT * FROM cast_to_correct_types", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "recent_submissions"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.unnest_json_array"], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_submissions_recent.sql", "compiled": true, "compiled_code": "WITH\n\nfilings_info AS (\n\nSELECT cik, PARSE_JSON(filings).recent FROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_recent`\n),\n\narrays AS (\n  SELECT \n    cik, \n    JSON_EXTRACT_ARRAY(recent.accessionNumber) AS accession_number,\n    JSON_EXTRACT_ARRAY(recent.acceptanceDateTime) AS acceptance_datetime,\n    JSON_EXTRACT_ARRAY(recent.filingDate) AS filing_date,\n    JSON_EXTRACT_ARRAY(recent.reportDate) AS report_date,\n    JSON_EXTRACT_ARRAY(recent.form) AS form,\n    JSON_EXTRACT_ARRAY(recent.fileNumber) AS file_number,\n    JSON_EXTRACT_ARRAY(recent.filmNumber) AS film_number,\n    JSON_EXTRACT_ARRAY(recent.isInlineXBRL) AS is_inline_XBRL,\n    JSON_EXTRACT_ARRAY(recent.isXBRL) AS is_XBRL,\n    JSON_EXTRACT_ARRAY(recent.primaryDocDescription) AS primary_doc_description\n\n    FROM filings_info\n),\n\naccession_number AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(accession_number) AS val\n    )\n),\n\nacceptance_datetime AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(acceptance_datetime) AS val\n    )\n),\n\nfiling_date AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(filing_date) AS val\n    )\n),\n\nreport_date AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(report_date) AS val\n    )\n),\n\nform AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(form) AS val\n    )\n),\n\nfile_number AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(file_number) AS val\n    )\n),\n\nfilm_number AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(film_number) AS val\n    )\n),\n\nis_inline_XBRL AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(is_inline_XBRL) AS val\n    )\n),\n\nis_XBRL AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(is_XBRL) AS val\n    )\n),\n\nprimary_doc_description AS (\n    (\n        SELECT \n            cik, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM arrays,\n        UNNEST(primary_doc_description) AS val\n    )\n),\n\njoined AS (\n    \n    SELECT\n        accession_number.cik,\n        accession_number.val AS accession_number,\n        acceptance_datetime.val AS acceptance_datetime,\n        filing_date.val AS filing_date,\n        report_date.val AS report_date,\n        form.val AS form,\n        file_number.val AS file_number,\n        film_number.val AS film_number,\n        is_inline_XBRL.val AS is_inline_XBRL,\n        is_XBRL.val AS is_XBRL,\n        primary_doc_description.val AS primary_doc_description\n    FROM accession_number\n    INNER JOIN acceptance_datetime ON accession_number.row_num = acceptance_datetime.row_num\n    INNER JOIN filing_date ON accession_number.row_num = filing_date.row_num\n    INNER JOIN report_date ON accession_number.row_num = report_date.row_num\n    INNER JOIN form ON accession_number.row_num = form.row_num\n    INNER JOIN file_number ON accession_number.row_num = file_number.row_num\n    INNER JOIN film_number ON accession_number.row_num = film_number.row_num\n    INNER JOIN is_inline_XBRL ON accession_number.row_num = is_inline_XBRL.row_num\n    INNER JOIN is_XBRL ON accession_number.row_num = is_XBRL.row_num\n    INNER JOIN primary_doc_description ON accession_number.row_num = primary_doc_description.row_num\n),\n\ncast_to_correct_types AS (\n\n    SELECT\n        CAST(cik AS INT64) AS cik,\n        STRING(accession_number) AS accession_number,\n        CAST(STRING(acceptance_datetime) AS TIMESTAMP) AS acceptance_datetime,\n        CAST(STRING(filing_date) AS DATE) AS filing_date,\n        CASE\n            WHEN STRING(report_date)='' THEN NULL\n            ELSE CAST(STRING(report_date) AS DATE)\n        END AS report_date,\n        STRING(form) AS form,\n        STRING(file_number) AS file_number,\n        STRING(film_number) AS film_number,\n        CAST(INT64(is_inline_XBRL) AS BOOL) AS is_inline_XBRL,\n        CAST(INT64(is_XBRL) AS BOOL) AS is_XBRL,\n        STRING(primary_doc_description) AS primary_doc_description\n    FROM joined\n)\n\nSELECT * FROM cast_to_correct_types", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent": {"database": "sbx-1-sec-edgar", "schema": "refined", "name": "stg_sec_edgar__company_submissions_subsequent", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/sec-edgar/stg_sec_edgar__company_submissions_subsequent.sql", "original_file_path": "models/staging/sec-edgar/stg_sec_edgar__company_submissions_subsequent.sql", "unique_id": "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "stg_sec_edgar__company_submissions_subsequent"], "alias": "company_subsequent_submissions", "checksum": {"name": "sha256", "checksum": "0fad670eda9bc48d796bbff019c73cb882d74bcdc2af430622350545c6f88e8b"}, "config": {"enabled": true, "alias": "company_subsequent_submissions", "schema": "refined", "database": "sbx-1-sec-edgar", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "For companies with more than 1000 filings, this table contains all filing submissions beyond the first 1000.", "columns": {"accession_number": {"name": "accession_number", "description": "The primary key for this table.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/sec-edgar/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "sbx-1-sec-edgar", "schema": "refined", "alias": "company_subsequent_submissions"}, "created_at": 1678414468.4366777, "relation_name": "`sbx-1-sec-edgar`.`refined`.`company_subsequent_submissions`", "raw_code": "WITH\n\ninitial AS (\n\n    SELECT\n        cik,\n        accessionnumber AS accession_number,\n        acceptancedatetime AS acceptance_datetime,\n        filingdate AS filing_date,\n        reportdate AS report_date,\n        form,\n        filenumber AS file_number,\n        filmnumber AS film_number,\n        isinlinexbrl AS is_inline_XBRL,\n        isxbrl AS is_XBRL,\n        primarydocdescription AS primary_doc_description\n    FROM {{ source('sec_edgar_raw', 'subsequent_submissions') }}\n),\n\naccession_number AS ({{ unnest_string_array('accession_number', 'initial') }}),\n\nacceptance_datetime AS ({{ unnest_string_array('acceptance_datetime', 'initial') }}),\n\nfiling_date AS ({{ unnest_string_array('filing_date', 'initial') }}),\n\nreport_date AS ({{ unnest_string_array('report_date', 'initial') }}),\n\nform AS ({{ unnest_string_array('form', 'initial') }}),\n\nfile_number AS ({{ unnest_string_array('file_number', 'initial') }}),\n\nfilm_number AS ({{ unnest_string_array('film_number', 'initial') }}),\n\nis_inline_XBRL AS ({{ unnest_string_array('is_inline_XBRL', 'initial') }}),\n\nis_XBRL AS ({{ unnest_string_array('is_XBRL', 'initial') }}),\n\nprimary_doc_description AS ({{ unnest_string_array('primary_doc_description', 'initial') }}),\n\njoined as (\n\n    SELECT\n        accession_number.cik,\n        accession_number.val AS accession_number,\n        acceptance_datetime.val AS acceptance_datetime,\n        filing_date.val AS filing_date,\n        report_date.val AS report_date,\n        form.val AS form,\n        file_number.val AS file_number,\n        film_number.val AS film_number,\n        is_inline_XBRL.val AS is_inline_XBRL,\n        is_XBRL.val AS is_XBRL,\n        primary_doc_description.val AS primary_doc_description\n    FROM accession_number\n    INNER JOIN acceptance_datetime ON accession_number.row_num = acceptance_datetime.row_num\n    INNER JOIN filing_date ON accession_number.row_num = filing_date.row_num\n    INNER JOIN report_date ON accession_number.row_num = report_date.row_num\n    INNER JOIN form ON accession_number.row_num = form.row_num\n    INNER JOIN file_number ON accession_number.row_num = file_number.row_num\n    INNER JOIN film_number ON accession_number.row_num = film_number.row_num\n    INNER JOIN is_inline_XBRL ON accession_number.row_num = is_inline_XBRL.row_num\n    INNER JOIN is_XBRL ON accession_number.row_num = is_XBRL.row_num\n    INNER JOIN primary_doc_description ON accession_number.row_num = primary_doc_description.row_num\n),\n\nextraneous_characters_removed AS (\n\n    SELECT\n        cik,\n        REPLACE(accession_number, '\"', '') AS accession_number,\n        REPLACE(acceptance_datetime, '\"', '') AS acceptance_datetime,\n        REPLACE(filing_date, '\"', '') AS filing_date,\n        REPLACE(report_date, '\"', '') AS report_date,\n        form,\n        file_number,\n        film_number,\n        is_inline_XBRL,\n        is_XBRL,\n        primary_doc_description\n    FROM joined\n),\n\ncast_to_correct_types AS (\n\n    SELECT\n        cik,\n        accession_number,\n        PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S.000Z', acceptance_datetime) AS acceptance_datetime,\n        PARSE_DATE('%Y-%m-%d', filing_date) AS filing_date,\n        CASE\n            WHEN report_date NOT LIKE '[0-9]' THEN NULL\n            ELSE PARSE_DATE('%Y-%m-%d', report_date)\n        END AS report_date,\n        form,\n        file_number,\n        film_number,\n        CAST(CAST(is_inline_XBRL AS INT64) AS BOOL) AS is_inline_XBRL,\n        CAST(CAST(is_XBRL AS INT64) AS BOOL) AS is_XBRL,\n        primary_doc_description\n    FROM extraneous_characters_removed\n)\n\nSELECT * FROM cast_to_correct_types", "language": "sql", "refs": [], "sources": [["sec_edgar_raw", "subsequent_submissions"]], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.unnest_string_array"], "nodes": ["source.jefferson_street_dbt.sec_edgar_raw.subsequent_submissions"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/stg_sec_edgar__company_submissions_subsequent.sql", "compiled": true, "compiled_code": "WITH\n\ninitial AS (\n\n    SELECT\n        cik,\n        accessionnumber AS accession_number,\n        acceptancedatetime AS acceptance_datetime,\n        filingdate AS filing_date,\n        reportdate AS report_date,\n        form,\n        filenumber AS file_number,\n        filmnumber AS film_number,\n        isinlinexbrl AS is_inline_XBRL,\n        isxbrl AS is_XBRL,\n        primarydocdescription AS primary_doc_description\n    FROM `sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_subsequent`\n),\n\naccession_number AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      accession_number, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nacceptance_datetime AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      acceptance_datetime, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nfiling_date AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      filing_date, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nreport_date AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      report_date, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nform AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      form, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nfile_number AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      file_number, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nfilm_number AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      film_number, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nis_inline_XBRL AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      is_inline_XBRL, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nis_XBRL AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      is_XBRL, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\nprimary_doc_description AS (\n\n\n    (\n        SELECT val, cik, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                cik,\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      primary_doc_description, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM initial\n        ), \n        UNNEST(val_arr) AS val\n    )\n),\n\njoined as (\n\n    SELECT\n        accession_number.cik,\n        accession_number.val AS accession_number,\n        acceptance_datetime.val AS acceptance_datetime,\n        filing_date.val AS filing_date,\n        report_date.val AS report_date,\n        form.val AS form,\n        file_number.val AS file_number,\n        film_number.val AS film_number,\n        is_inline_XBRL.val AS is_inline_XBRL,\n        is_XBRL.val AS is_XBRL,\n        primary_doc_description.val AS primary_doc_description\n    FROM accession_number\n    INNER JOIN acceptance_datetime ON accession_number.row_num = acceptance_datetime.row_num\n    INNER JOIN filing_date ON accession_number.row_num = filing_date.row_num\n    INNER JOIN report_date ON accession_number.row_num = report_date.row_num\n    INNER JOIN form ON accession_number.row_num = form.row_num\n    INNER JOIN file_number ON accession_number.row_num = file_number.row_num\n    INNER JOIN film_number ON accession_number.row_num = film_number.row_num\n    INNER JOIN is_inline_XBRL ON accession_number.row_num = is_inline_XBRL.row_num\n    INNER JOIN is_XBRL ON accession_number.row_num = is_XBRL.row_num\n    INNER JOIN primary_doc_description ON accession_number.row_num = primary_doc_description.row_num\n),\n\nextraneous_characters_removed AS (\n\n    SELECT\n        cik,\n        REPLACE(accession_number, '\"', '') AS accession_number,\n        REPLACE(acceptance_datetime, '\"', '') AS acceptance_datetime,\n        REPLACE(filing_date, '\"', '') AS filing_date,\n        REPLACE(report_date, '\"', '') AS report_date,\n        form,\n        file_number,\n        film_number,\n        is_inline_XBRL,\n        is_XBRL,\n        primary_doc_description\n    FROM joined\n),\n\ncast_to_correct_types AS (\n\n    SELECT\n        cik,\n        accession_number,\n        PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%S.000Z', acceptance_datetime) AS acceptance_datetime,\n        PARSE_DATE('%Y-%m-%d', filing_date) AS filing_date,\n        CASE\n            WHEN report_date NOT LIKE '[0-9]' THEN NULL\n            ELSE PARSE_DATE('%Y-%m-%d', report_date)\n        END AS report_date,\n        form,\n        file_number,\n        film_number,\n        CAST(CAST(is_inline_XBRL AS INT64) AS BOOL) AS is_inline_XBRL,\n        CAST(CAST(is_XBRL AS INT64) AS BOOL) AS is_XBRL,\n        primary_doc_description\n    FROM extraneous_characters_removed\n)\n\nSELECT * FROM cast_to_correct_types", "extra_ctes_injected": true, "extra_ctes": []}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_recent_accession_number.26645ae23a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "accession_number", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_submissions_recent')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_submissions_recent_accession_number", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company__780ac2204f71d4f3e24792d3c5f70c63.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_recent_accession_number.26645ae23a", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_submissions_recent_accession_number"], "alias": "unique_stg_sec_edgar__company__780ac2204f71d4f3e24792d3c5f70c63", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_sec_edgar__company__780ac2204f71d4f3e24792d3c5f70c63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_sec_edgar__company__780ac2204f71d4f3e24792d3c5f70c63"}, "created_at": 1678414468.4534557, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_sec_edgar__company__780ac2204f71d4f3e24792d3c5f70c63\") }}", "language": "sql", "refs": [["stg_sec_edgar__company_submissions_recent"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company__780ac2204f71d4f3e24792d3c5f70c63.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select accession_number as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`company_recent_submissions`\n  where accession_number is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accession_number", "file_key_name": "models.stg_sec_edgar__company_submissions_recent"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_recent_accession_number.29113cf476": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "accession_number", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_submissions_recent')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_submissions_recent_accession_number", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__compan_eb204670c42236bda41c4c18c45fe90b.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_recent_accession_number.29113cf476", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_submissions_recent_accession_number"], "alias": "not_null_stg_sec_edgar__compan_eb204670c42236bda41c4c18c45fe90b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_sec_edgar__compan_eb204670c42236bda41c4c18c45fe90b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_sec_edgar__compan_eb204670c42236bda41c4c18c45fe90b"}, "created_at": 1678414468.4567995, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_sec_edgar__compan_eb204670c42236bda41c4c18c45fe90b\") }}", "language": "sql", "refs": [["stg_sec_edgar__company_submissions_recent"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__compan_eb204670c42236bda41c4c18c45fe90b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accession_number\nfrom `sbx-1-sec-edgar`.`refined`.`company_recent_submissions`\nwhere accession_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accession_number", "file_key_name": "models.stg_sec_edgar__company_submissions_recent"}, "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_subsequent_accession_number.ce0c89ea70": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "accession_number", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_submissions_subsequent')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "unique_stg_sec_edgar__company_submissions_subsequent_accession_number", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "unique_stg_sec_edgar__company__e3e1dc58a2dec8f3fb81650b262ba5f1.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_subsequent_accession_number.ce0c89ea70", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "unique_stg_sec_edgar__company_submissions_subsequent_accession_number"], "alias": "unique_stg_sec_edgar__company__e3e1dc58a2dec8f3fb81650b262ba5f1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_sec_edgar__company__e3e1dc58a2dec8f3fb81650b262ba5f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_sec_edgar__company__e3e1dc58a2dec8f3fb81650b262ba5f1"}, "created_at": 1678414468.4596646, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_sec_edgar__company__e3e1dc58a2dec8f3fb81650b262ba5f1\") }}", "language": "sql", "refs": [["stg_sec_edgar__company_submissions_subsequent"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/unique_stg_sec_edgar__company__e3e1dc58a2dec8f3fb81650b262ba5f1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select accession_number as unique_field\n  from `sbx-1-sec-edgar`.`refined`.`company_subsequent_submissions`\n  where accession_number is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accession_number", "file_key_name": "models.stg_sec_edgar__company_submissions_subsequent"}, "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_subsequent_accession_number.2b8a717f41": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "accession_number", "model": "{{ get_where_subquery(ref('stg_sec_edgar__company_submissions_subsequent')) }}"}, "namespace": null}, "database": "sbx-1-fred", "schema": "dbt_test__audit", "name": "not_null_stg_sec_edgar__company_submissions_subsequent_accession_number", "resource_type": "test", "package_name": "jefferson_street_dbt", "path": "not_null_stg_sec_edgar__compan_a31a56f0cf38e5bfb028ce2c491ce3a8.sql", "original_file_path": "models/staging/sec-edgar/schema.yml", "unique_id": "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_subsequent_accession_number.2b8a717f41", "fqn": ["jefferson_street_dbt", "staging", "sec-edgar", "not_null_stg_sec_edgar__company_submissions_subsequent_accession_number"], "alias": "not_null_stg_sec_edgar__compan_a31a56f0cf38e5bfb028ce2c491ce3a8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_sec_edgar__compan_a31a56f0cf38e5bfb028ce2c491ce3a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_sec_edgar__compan_a31a56f0cf38e5bfb028ce2c491ce3a8"}, "created_at": 1678414468.4625926, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_sec_edgar__compan_a31a56f0cf38e5bfb028ce2c491ce3a8\") }}", "language": "sql", "refs": [["stg_sec_edgar__company_submissions_subsequent"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/sec-edgar/schema.yml/not_null_stg_sec_edgar__compan_a31a56f0cf38e5bfb028ce2c491ce3a8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect accession_number\nfrom `sbx-1-sec-edgar`.`refined`.`company_subsequent_submissions`\nwhere accession_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "accession_number", "file_key_name": "models.stg_sec_edgar__company_submissions_subsequent"}, "model.jefferson_street_dbt.stg_bt_uploads__unnested": {"database": "jefferson-street-analytics", "schema": "bt_uploads", "name": "stg_bt_uploads__unnested", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/bt_uploads/stg_bt_uploads__unnested.sql", "original_file_path": "models/staging/bt_uploads/stg_bt_uploads__unnested.sql", "unique_id": "model.jefferson_street_dbt.stg_bt_uploads__unnested", "fqn": ["jefferson_street_dbt", "staging", "bt_uploads", "stg_bt_uploads__unnested"], "alias": "unnested", "checksum": {"name": "sha256", "checksum": "38b9c3bd641df2ae5256ee8e13ff919bca046033e00555105dd2b99b417449de"}, "config": {"enabled": true, "alias": "unnested", "schema": "bt_uploads", "database": "jefferson-street-analytics", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Backtest data unnested to be read and further processed by downstream models", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/bt_uploads/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "jefferson-street-analytics", "schema": "bt_uploads", "alias": "unnested"}, "created_at": 1678416121.9982536, "relation_name": "`jefferson-street-analytics`.`bt_uploads`.`unnested`", "raw_code": "{% set cols = [\"name\", \"prices\", \"stats\", \"positions\", \"weights\", \"security_weights\", \"turnover\", \"herfindahl_index\", \"transactions\"] %}\n\nWITH \n\nsource AS (\n    SELECT\n        user,\n        tag,\n        timestamp AS upload_timestamp,\n        PARSE_JSON(data, wide_number_mode=>\"round\") AS data_json\n    FROM {{ source(\"bt_uploads\", \"raw\") }}\n)\n\nSELECT\n    user,\n    tag,\n    CAST(upload_timestamp AS TIMESTAMP FORMAT 'MM-DD-YYYY HH24:MI:SS') AS upload_timestamp,\n    STRING(data_json.name) AS backtest_name,\n    {% for c in cols[1:] %}\n    data_json.{{c}},\n    {% endfor %}\nFROM source", "language": "sql", "refs": [], "sources": [["bt_uploads", "raw"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.jefferson_street_dbt.bt_uploads.raw", "source.jefferson_street_dbt.bt_uploads.raw"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/bt_uploads/stg_bt_uploads__unnested.sql", "compiled": true, "compiled_code": "\n\nWITH \n\nsource AS (\n    SELECT\n        user,\n        tag,\n        timestamp AS upload_timestamp,\n        PARSE_JSON(data, wide_number_mode=>\"round\") AS data_json\n    FROM `jefferson-street-analytics`.`bt_uploads`.`raw`\n)\n\nSELECT\n    user,\n    tag,\n    CAST(upload_timestamp AS TIMESTAMP FORMAT 'MM-DD-YYYY HH24:MI:SS') AS upload_timestamp,\n    STRING(data_json.name) AS backtest_name,\n    \n    data_json.prices,\n    \n    data_json.stats,\n    \n    data_json.positions,\n    \n    data_json.weights,\n    \n    data_json.security_weights,\n    \n    data_json.turnover,\n    \n    data_json.herfindahl_index,\n    \n    data_json.transactions,\n    \nFROM source", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_bt_uploads__stats": {"database": "jefferson-street-analytics", "schema": "bt_uploads", "name": "stg_bt_uploads__stats", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/bt_uploads/stg_bt_uploads__stats.sql", "original_file_path": "models/staging/bt_uploads/stg_bt_uploads__stats.sql", "unique_id": "model.jefferson_street_dbt.stg_bt_uploads__stats", "fqn": ["jefferson_street_dbt", "staging", "bt_uploads", "stg_bt_uploads__stats"], "alias": "statistics", "checksum": {"name": "sha256", "checksum": "94e22bd04457f7442d6e9382740eaf046b9e8d4e54abd652f25c73f21e0a1e0b"}, "config": {"enabled": true, "alias": "statistics", "schema": "bt_uploads", "database": "jefferson-street-analytics", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains various statistics related to backtest performance.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/bt_uploads/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "jefferson-street-analytics", "schema": "bt_uploads", "alias": "statistics"}, "created_at": 1678416158.6684043, "relation_name": "`jefferson-street-analytics`.`bt_uploads`.`statistics`", "raw_code": "{% set cols = [\"metric\", \"value\"] %}\nWITH\n\narrays AS (\n    SELECT\n        {% for c in cols %}\n        JSON_EXTRACT_STRING_ARRAY(stats.{{c}}) AS {{c}}_col,\n        {% endfor %}\n        user,\n        tag,\n        upload_timestamp,\n        backtest_name\n    FROM {{ ref(\"stg_bt_uploads__unnested\") }}\n),\n\n{% for c in cols %}\n{{c}}_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST({{c}}_col) AS num_val\n),\n{% endfor %}\n\njoined AS (\n    SELECT\n        {% for c in cols %}\n        {{c}}_unnested.num_val AS {{c}}_col,\n        {% endfor %}\n        {{ cols[0] }}_unnested.user,\n        {{ cols[0] }}_unnested.tag,\n        {{ cols[0] }}_unnested.upload_timestamp,\n        {{ cols[0] }}_unnested.backtest_name\n    FROM {{ cols[0] }}_unnested\n    {% for c in cols[1:] %}\n        INNER JOIN {{c}}_unnested ON {{ cols[0] }}_unnested.row_num = {{c}}_unnested.row_num\n    {% endfor %}\n    \n),\n\nrecast_and_renamed AS (\n    SELECT\n        metric_col AS metric,\n        CASE\n            WHEN value_col IN ('nan', 'inf', '-inf') THEN NULL\n            ELSE CAST(value_col AS NUMERIC)\n        END AS value,\n        backtest_name,\n        user,\n        tag,\n        upload_timestamp\n    FROM joined\n)\n\nSELECT * FROM recast_and_renamed", "language": "sql", "refs": [["stg_bt_uploads__unnested"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.jefferson_street_dbt.stg_bt_uploads__unnested", "model.jefferson_street_dbt.stg_bt_uploads__unnested"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/bt_uploads/stg_bt_uploads__stats.sql", "compiled": true, "compiled_code": "\nWITH\n\narrays AS (\n    SELECT\n        \n        JSON_EXTRACT_STRING_ARRAY(stats.metric) AS metric_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(stats.value) AS value_col,\n        \n        user,\n        tag,\n        upload_timestamp,\n        backtest_name\n    FROM `jefferson-street-analytics`.`bt_uploads`.`unnested`\n),\n\n\nmetric_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(metric_col) AS num_val\n),\n\nvalue_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(value_col) AS num_val\n),\n\n\njoined AS (\n    SELECT\n        \n        metric_unnested.num_val AS metric_col,\n        \n        value_unnested.num_val AS value_col,\n        \n        metric_unnested.user,\n        metric_unnested.tag,\n        metric_unnested.upload_timestamp,\n        metric_unnested.backtest_name\n    FROM metric_unnested\n    \n        INNER JOIN value_unnested ON metric_unnested.row_num = value_unnested.row_num\n    \n    \n),\n\nrecast_and_renamed AS (\n    SELECT\n        metric_col AS metric,\n        CASE\n            WHEN value_col IN ('nan', 'inf', '-inf') THEN NULL\n            ELSE CAST(value_col AS NUMERIC)\n        END AS value,\n        backtest_name,\n        user,\n        tag,\n        upload_timestamp\n    FROM joined\n)\n\nSELECT * FROM recast_and_renamed", "extra_ctes_injected": true, "extra_ctes": []}, "model.jefferson_street_dbt.stg_bt_uploads__prices": {"database": "jefferson-street-analytics", "schema": "bt_uploads", "name": "stg_bt_uploads__prices", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/bt_uploads/stg_bt_uploads__prices.sql", "original_file_path": "models/staging/bt_uploads/stg_bt_uploads__prices.sql", "unique_id": "model.jefferson_street_dbt.stg_bt_uploads__prices", "fqn": ["jefferson_street_dbt", "staging", "bt_uploads", "stg_bt_uploads__prices"], "alias": "prices", "checksum": {"name": "sha256", "checksum": "a3d294a1456579f0c5858e3243d51971eed8673f9d55029b1b227bfb556d2ac2"}, "config": {"enabled": true, "alias": "prices", "schema": "bt_uploads", "database": "jefferson-street-analytics", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Contains backtest 'prices' i.e. backtest performance scaled to begin at 100", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "jefferson_street_dbt://models/staging/bt_uploads/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "jefferson-street-analytics", "schema": "bt_uploads", "alias": "prices"}, "created_at": 1678416122.002343, "relation_name": "`jefferson-street-analytics`.`bt_uploads`.`prices`", "raw_code": "{% set cols = [\"timestamp\", \"value\"] %}\nWITH\n\narrays AS (\n    SELECT\n        {% for c in cols %}\n        JSON_EXTRACT_STRING_ARRAY(prices.{{c}}) AS {{c}}_col,\n        {% endfor %}\n        user,\n        tag,\n        upload_timestamp,\n        backtest_name\n    FROM {{ ref(\"stg_bt_uploads__unnested\") }}\n),\n\n{% for c in cols %}\n{{c}}_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST({{c}}_col) AS num_val\n),\n{% endfor %}\n\njoined AS (\n    SELECT\n        {% for c in cols %}\n        {{c}}_unnested.num_val AS {{c}}_col,\n        {% endfor %}\n        {{ cols[0] }}_unnested.user,\n        {{ cols[0] }}_unnested.tag,\n        {{ cols[0] }}_unnested.upload_timestamp,\n        {{ cols[0] }}_unnested.backtest_name\n    FROM {{ cols[0] }}_unnested\n    {% for c in cols[1:] %}\n        INNER JOIN {{c}}_unnested ON {{ cols[0] }}_unnested.row_num = {{c}}_unnested.row_num\n    {% endfor %}\n    \n),\n\nrecast_and_renamed AS (\n    SELECT\n        CAST(timestamp_col AS TIMESTAMP FORMAT 'MM-DD-YYYY HH24:MI:SS') AS timestamp,\n        CAST(value_col AS NUMERIC) AS value,\n        backtest_name,\n        user,\n        tag,\n        upload_timestamp\n    FROM joined\n)\n\nSELECT * FROM recast_and_renamed", "language": "sql", "refs": [["stg_bt_uploads__unnested"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.jefferson_street_dbt.stg_bt_uploads__unnested"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/bt_uploads/stg_bt_uploads__prices.sql", "compiled": true, "compiled_code": "\nWITH\n\narrays AS (\n    SELECT\n        \n        JSON_EXTRACT_STRING_ARRAY(prices.timestamp) AS timestamp_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(prices.value) AS value_col,\n        \n        user,\n        tag,\n        upload_timestamp,\n        backtest_name\n    FROM `jefferson-street-analytics`.`bt_uploads`.`unnested`\n),\n\n\ntimestamp_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(timestamp_col) AS num_val\n),\n\nvalue_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(value_col) AS num_val\n),\n\n\njoined AS (\n    SELECT\n        \n        timestamp_unnested.num_val AS timestamp_col,\n        \n        value_unnested.num_val AS value_col,\n        \n        timestamp_unnested.user,\n        timestamp_unnested.tag,\n        timestamp_unnested.upload_timestamp,\n        timestamp_unnested.backtest_name\n    FROM timestamp_unnested\n    \n        INNER JOIN value_unnested ON timestamp_unnested.row_num = value_unnested.row_num\n    \n    \n),\n\nrecast_and_renamed AS (\n    SELECT\n        CAST(timestamp_col AS TIMESTAMP FORMAT 'MM-DD-YYYY HH24:MI:SS') AS timestamp,\n        CAST(value_col AS NUMERIC) AS value,\n        backtest_name,\n        user,\n        tag,\n        upload_timestamp\n    FROM joined\n)\n\nSELECT * FROM recast_and_renamed", "extra_ctes_injected": true, "extra_ctes": []}, "seed.jefferson_street_dbt.metric_labels": {"database": "sbx-1-fred", "schema": "raw", "name": "metric_labels", "resource_type": "seed", "package_name": "jefferson_street_dbt", "path": "analytics/metric_labels.csv", "original_file_path": "seeds/analytics/metric_labels.csv", "unique_id": "seed.jefferson_street_dbt.metric_labels", "fqn": ["jefferson_street_dbt", "analytics", "metric_labels"], "alias": "metric_labels", "checksum": {"name": "sha256", "checksum": "8ccb812e43fd69256729f18d747f6d9d2eb7f19ace7de98451d079dcc6876541"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678902468.6221972, "relation_name": "`sbx-1-fred`.`raw`.`metric_labels`", "raw_code": "", "root_path": "/home/mahfuj/Monorepo/dbt"}, "model.jefferson_street_dbt.stg_bt_uploads__weights": {"database": "jefferson-street-analytics", "schema": "bt_uploads", "name": "stg_bt_uploads__weights", "resource_type": "model", "package_name": "jefferson_street_dbt", "path": "staging/bt_uploads/stg_bt_uploads__weights.sql", "original_file_path": "models/staging/bt_uploads/stg_bt_uploads__weights.sql", "unique_id": "model.jefferson_street_dbt.stg_bt_uploads__weights", "fqn": ["jefferson_street_dbt", "staging", "bt_uploads", "stg_bt_uploads__weights"], "alias": "stg_bt_uploads__weights", "checksum": {"name": "sha256", "checksum": "26804b3c825e55b1c68e5c93d7a087ed783c1763eccb69bf799fe7994c740b47"}, "config": {"enabled": true, "alias": null, "schema": "bt_uploads", "database": "jefferson-street-analytics", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "jefferson-street-analytics", "schema": "bt_uploads"}, "created_at": 1678902654.673814, "relation_name": "`jefferson-street-analytics`.`bt_uploads`.`stg_bt_uploads__weights`", "raw_code": "{% set cols = [\"timestamp\", \"security\", \"value\"] %}\n\n{{ bt_unpack_from_base(cols, \"weights\") }}", "language": "sql", "refs": [["stg_bt_uploads__unnested"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.jefferson_street_dbt.bt_unpack_from_base"], "nodes": ["model.jefferson_street_dbt.stg_bt_uploads__unnested"]}, "compiled_path": "target/compiled/jefferson_street_dbt/models/staging/bt_uploads/stg_bt_uploads__weights.sql", "compiled": true, "compiled_code": "\n\n\nWITH\n\narrays AS (\n    SELECT\n        \n        JSON_EXTRACT_STRING_ARRAY(weights.timestamp) AS timestamp_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(weights.security) AS security_col,\n        \n        JSON_EXTRACT_STRING_ARRAY(weights.value) AS value_col,\n        \n        user,\n        tag,\n        upload_timestamp,\n        backtest_name\n    FROM  `jefferson-street-analytics`.`bt_uploads`.`unnested`\n),\n\n\ntimestamp_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(timestamp_col) AS num_val\n),\n\nsecurity_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(security_col) AS num_val\n),\n\nvalue_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST(value_col) AS num_val\n),\n\n\njoined AS (\n    SELECT\n        \n        timestamp_unnested.num_val AS timestamp_col,\n        \n        security_unnested.num_val AS security_col,\n        \n        value_unnested.num_val AS value_col,\n        \n        timestamp_unnested.user,\n        timestamp_unnested.tag,\n        timestamp_unnested.upload_timestamp,\n        timestamp_unnested.backtest_name\n    FROM timestamp_unnested\n    \n        INNER JOIN security_unnested ON timestamp_unnested.row_num = security_unnested.row_num\n    \n        INNER JOIN value_unnested ON timestamp_unnested.row_num = value_unnested.row_num\n    \n    \n)\n\nSELECT * FROM joined", "extra_ctes_injected": true, "extra_ctes": []}}, "sources": {"source.jefferson_street_dbt.fred_raw.releases": {"database": "sbx-1-fred", "schema": "raw", "name": "releases", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.fred_raw.releases", "fqn": ["jefferson_street_dbt", "fred_raw", "releases"], "source_name": "fred_raw", "source_description": "Economic data sourced from the Federal Reserve's FRED database. API documentation can be found [here](https://fred.stlouisfed.org/docs/api/fred/).", "loader": "", "identifier": "fred_releases", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains all releases of economic data. [See the official documentation for further details](https://fred.stlouisfed.org/docs/api/fred/releases.html).", "columns": {}, "meta": {"endpoint": "fred/releases"}, "source_meta": {"url": "https://api.stlouisfed.org"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-fred`.`raw`.`fred_releases`", "created_at": 1678410503.980394}, "source.jefferson_street_dbt.fred_raw.release_dates": {"database": "sbx-1-fred", "schema": "raw", "name": "release_dates", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.fred_raw.release_dates", "fqn": ["jefferson_street_dbt", "fred_raw", "release_dates"], "source_name": "fred_raw", "source_description": "Economic data sourced from the Federal Reserve's FRED database. API documentation can be found [here](https://fred.stlouisfed.org/docs/api/fred/).", "loader": "", "identifier": "fred_release_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains release dates for all releases of economic data. Note that release dates are published by data sources and do not necessarily represent when data will be available on the FRED website. [See the official documentation for further details](https://fred.stlouisfed.org/docs/api/fred/releases_dates.html).", "columns": {}, "meta": {"endpoint": "fred/releases/dates"}, "source_meta": {"url": "https://api.stlouisfed.org"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-fred`.`raw`.`fred_release_dates`", "created_at": 1678410503.981444}, "source.jefferson_street_dbt.fred_raw.release_series": {"database": "sbx-1-fred", "schema": "raw", "name": "release_series", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.fred_raw.release_series", "fqn": ["jefferson_street_dbt", "fred_raw", "release_series"], "source_name": "fred_raw", "source_description": "Economic data sourced from the Federal Reserve's FRED database. API documentation can be found [here](https://fred.stlouisfed.org/docs/api/fred/).", "loader": "", "identifier": "fred_release_series", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains the series on a release of economic data. [See the official documentation for further details](https://fred.stlouisfed.org/docs/api/fred/release_series.html).", "columns": {}, "meta": {"endpoint": "fred/release/series"}, "source_meta": {"url": "https://api.stlouisfed.org"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-fred`.`raw`.`fred_release_series`", "created_at": 1678410503.982111}, "source.jefferson_street_dbt.fred_raw.categories": {"database": "sbx-1-fred", "schema": "raw", "name": "categories", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.fred_raw.categories", "fqn": ["jefferson_street_dbt", "fred_raw", "categories"], "source_name": "fred_raw", "source_description": "Economic data sourced from the Federal Reserve's FRED database. API documentation can be found [here](https://fred.stlouisfed.org/docs/api/fred/).", "loader": "", "identifier": "fred_series_categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains the categories for economic data series. [See the official documentation for further details](https://fred.stlouisfed.org/docs/api/fred/series_categories.html).", "columns": {}, "meta": {"endpoint": "fred/series/categories"}, "source_meta": {"url": "https://api.stlouisfed.org"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-fred`.`raw`.`fred_series_categories`", "created_at": 1678410503.9825804}, "source.jefferson_street_dbt.fred_raw.revised_observations": {"database": "sbx-1-fred", "schema": "raw", "name": "revised_observations", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.fred_raw.revised_observations", "fqn": ["jefferson_street_dbt", "fred_raw", "revised_observations"], "source_name": "fred_raw", "source_description": "Economic data sourced from the Federal Reserve's FRED database. API documentation can be found [here](https://fred.stlouisfed.org/docs/api/fred/).", "loader": "", "identifier": "fred_series_observations_revised", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains the observations or data values for economic data series. This table uses **output type 1**. [See the official documentation for further details](https://fred.stlouisfed.org/docs/api/fred/series_observations.html).", "columns": {}, "meta": {"endpoint": "fred/series/observations"}, "source_meta": {"url": "https://api.stlouisfed.org"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-fred`.`raw`.`fred_series_observations_revised`", "created_at": 1678410503.9829714}, "source.jefferson_street_dbt.fred_raw.unrevised_observations": {"database": "sbx-1-fred", "schema": "raw", "name": "unrevised_observations", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.fred_raw.unrevised_observations", "fqn": ["jefferson_street_dbt", "fred_raw", "unrevised_observations"], "source_name": "fred_raw", "source_description": "Economic data sourced from the Federal Reserve's FRED database. API documentation can be found [here](https://fred.stlouisfed.org/docs/api/fred/).", "loader": "", "identifier": "fred_series_observations_unrevised", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains the observations or data values for economic data series. This table uses **output type 4**. [See the official documentation for further details](https://fred.stlouisfed.org/docs/api/fred/series_observations.html).", "columns": {}, "meta": {"endpoint": "fred/series/observations"}, "source_meta": {"url": "https://api.stlouisfed.org"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-fred`.`raw`.`fred_series_observations_unrevised`", "created_at": 1678410503.9833376}, "source.jefferson_street_dbt.fred_raw.tags": {"database": "sbx-1-fred", "schema": "raw", "name": "tags", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.fred_raw.tags", "fqn": ["jefferson_street_dbt", "fred_raw", "tags"], "source_name": "fred_raw", "source_description": "Economic data sourced from the Federal Reserve's FRED database. API documentation can be found [here](https://fred.stlouisfed.org/docs/api/fred/).", "loader": "", "identifier": "fred_series_tags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains all the FRED tags for economic data series. [See the official documentation for further details](https://fred.stlouisfed.org/docs/api/fred/series_tags.html).", "columns": {}, "meta": {"endpoint": "fred/series/tags"}, "source_meta": {"url": "https://api.stlouisfed.org"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-fred`.`raw`.`fred_series_tags`", "created_at": 1678410503.9837296}, "source.jefferson_street_dbt.sec_edgar_raw.ticker_cik_mapping": {"database": "sbx-1-sec-edgar", "schema": "raw", "name": "ticker_cik_mapping", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.sec_edgar_raw.ticker_cik_mapping", "fqn": ["jefferson_street_dbt", "sec_edgar_raw", "ticker_cik_mapping"], "source_name": "sec_edgar_raw", "source_description": "Data for companies registered with the SEC sourced from their EDGAR database. API documentation can be be found [here](https://www.sec.gov/edgar/sec-api-documentation).", "loader": "", "identifier": "sec_edgar_ticker_stream", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains a mapping between Central Index Keys (CIKs) and entity names.", "columns": {}, "meta": {"url": "https://www.sec.gov/include", "endpoint": "/ticker.txt"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-sec-edgar`.`raw`.`sec_edgar_ticker_stream`", "created_at": 1678410503.9841073}, "source.jefferson_street_dbt.sec_edgar_raw.company_facts": {"database": "sbx-1-sec-edgar", "schema": "raw", "name": "company_facts", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.sec_edgar_raw.company_facts", "fqn": ["jefferson_street_dbt", "sec_edgar_raw", "company_facts"], "source_name": "sec_edgar_raw", "source_description": "Data for companies registered with the SEC sourced from their EDGAR database. API documentation can be be found [here](https://www.sec.gov/edgar/sec-api-documentation).", "loader": "", "identifier": "sec_edgar_company_facts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains nested metrics and metric values for all Central Index Keys (CIKs).", "columns": {}, "meta": {"url": "https://data.sec.gov", "endpoint": "/submissions/CIK##########.json"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-sec-edgar`.`raw`.`sec_edgar_company_facts`", "created_at": 1678410503.9846656}, "source.jefferson_street_dbt.sec_edgar_raw.subsequent_submissions": {"database": "sbx-1-sec-edgar", "schema": "raw", "name": "subsequent_submissions", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.sec_edgar_raw.subsequent_submissions", "fqn": ["jefferson_street_dbt", "sec_edgar_raw", "subsequent_submissions"], "source_name": "sec_edgar_raw", "source_description": "Data for companies registered with the SEC sourced from their EDGAR database. API documentation can be be found [here](https://www.sec.gov/edgar/sec-api-documentation).", "loader": "", "identifier": "sec_edgar_company_submissions_subsequent", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains additional records of corporate filings e.g. 8-K, 10-K, etc.", "columns": {}, "meta": {"url": "https://data.sec.gov", "endpoint": "/submissions/CIK##########.json"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_subsequent`", "created_at": 1678410503.9851289}, "source.jefferson_street_dbt.sec_edgar_raw.recent_submissions": {"database": "sbx-1-sec-edgar", "schema": "raw", "name": "recent_submissions", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.sec_edgar_raw.recent_submissions", "fqn": ["jefferson_street_dbt", "sec_edgar_raw", "recent_submissions"], "source_name": "sec_edgar_raw", "source_description": "Data for companies registered with the SEC sourced from their EDGAR database. API documentation can be be found [here](https://www.sec.gov/edgar/sec-api-documentation).", "loader": "", "identifier": "sec_edgar_company_submissions_recent", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains records of corporate filings e.g. 8-K, 10-K, etc.", "columns": {}, "meta": {"url": "https://data.sec.gov", "endpoint": "/api/xbrl/companyfacts/CIK##########.json"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`sbx-1-sec-edgar`.`raw`.`sec_edgar_company_submissions_recent`", "created_at": 1678410503.985545}, "source.jefferson_street_dbt.bt_uploads.raw": {"database": "jefferson-street-analytics", "schema": "bt_uploads", "name": "raw", "resource_type": "source", "package_name": "jefferson_street_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.jefferson_street_dbt.bt_uploads.raw", "fqn": ["jefferson_street_dbt", "bt_uploads", "raw"], "source_name": "bt_uploads", "source_description": "Contains backtest data uploaded from bt", "loader": "", "identifier": "raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contains records of individual backtests with data in string-JSON format", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`jefferson-street-analytics`.`bt_uploads`.`raw`", "created_at": 1678410503.9858842}}, "macros": {"macro.jefferson_street_dbt.series_id_filter": {"name": "series_id_filter", "resource_type": "macro", "package_name": "jefferson_street_dbt", "path": "macros/fred_series_id_filter.sql", "original_file_path": "macros/fred_series_id_filter.sql", "unique_id": "macro.jefferson_street_dbt.series_id_filter", "macro_sql": "{% macro series_id_filter(table_name, series_id_col='series_id') %}\nseries_completeness AS (\n    SELECT series_id FROM {{ ref('md_fred__series_completeness') }}\n    WHERE nobs IS NOT NULL --exclude series ids with zero observations\n),\n\nseries_continuity AS (\n    SELECT series_id FROM {{ ref('md_fred__series_continuity') }}\n    WHERE discontinued=FALSE\n)\n\nSELECT\n    {{ table_name }}.*\nFROM {{ table_name }}\nINNER JOIN series_completeness\nON {{ table_name }}.series_id=series_completeness.series_id\nINNER JOIN series_continuity\nON {{ table_name }}.series_id=series_continuity.series_id\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6450183, "supported_languages": null}, "macro.jefferson_street_dbt.fred_get_subcategories": {"name": "fred_get_subcategories", "resource_type": "macro", "package_name": "jefferson_street_dbt", "path": "macros/fred_get_subcategories.sql", "original_file_path": "macros/fred_get_subcategories.sql", "unique_id": "macro.jefferson_street_dbt.fred_get_subcategories", "macro_sql": "{% macro fred_get_subcategories(table_name, parent_id, subcategory_id_name='category_id', label_name='label') -%}\nSELECT DISTINCT\ncategory_id AS {{ subcategory_id_name }}, label AS {{ label_name }}\nFROM {{ table_name }}\nWHERE parent_id = {{ parent_id }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.646622, "supported_languages": null}, "macro.jefferson_street_dbt.format_jefferson_street_ingest_time": {"name": "format_jefferson_street_ingest_time", "resource_type": "macro", "package_name": "jefferson_street_dbt", "path": "macros/format_column.sql", "original_file_path": "macros/format_column.sql", "unique_id": "macro.jefferson_street_dbt.format_jefferson_street_ingest_time", "macro_sql": "{% macro format_jefferson_street_ingest_time(col_in='jefferson_street_ingest_datetime') %}\nCAST({{ col_in }} as TIMESTAMP FORMAT 'YYYYMMDDHH24MI')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6473906, "supported_languages": null}, "macro.jefferson_street_dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "jefferson_street_dbt", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "unique_id": "macro.jefferson_street_dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6534724, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.655175, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6561403, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6573808, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6723175, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.674548, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6763625, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.677734, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6824644, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6838746, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6863668, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6874301, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6887257, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.689854, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.690961, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6917498, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6925097, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6937435, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6944962, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.6952162, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.697675, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.699737, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7028327, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7036524, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7048619, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.715308, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7176409, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7183797, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.720278, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7219954, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.724013, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7256193, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7264664, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.728187, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7312176, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7352228, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.737224, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7388532, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7403932, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7429452, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7443123, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.745493, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.747017, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7488472, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.750467, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7550194, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.757041, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.759124, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7804544, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.782774, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7917156, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.7955518, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8006053, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8123353, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by.field), source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8148654, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(is_time_ingestion_partitioning, temporary, relation, compiled_code, language='sql') %}\n  {% if is_time_ingestion_partitioning %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql)) %}\n    {{ return(bq_insert_into_ingestion_time_partitioned_table_sql(relation, sql)) }}\n  {% else %}\n    {{ return(create_table_as(temporary, relation, sql)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8183308, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8229644, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(dest_columns) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8475077, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8495116, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8504908, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8574944, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.859288, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.860081, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8606787, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8644314, "supported_languages": null}, "macro.dbt_bigquery.build_partition_time_exp": {"name": "build_partition_time_exp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.build_partition_time_exp", "macro_sql": "{% macro build_partition_time_exp(partition_by) %}\n  {% if partition_by.data_type == 'timestamp' %}\n    {% set partition_value = partition_by.field %}\n  {% else %}\n    {% set partition_value = 'timestamp(' + partition_by.field + ')' %}\n  {% endif %}\n  {{ return({'value': partition_value, 'field': partition_by.field}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8672016, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8688312, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_time_exp, sql, is_nested) %}\n\n  select {{ partition_time_exp['value'] }} as _partitiontime, * EXCEPT({{ partition_time_exp['field'] }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.874669, "supported_languages": null}, "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql": {"name": "create_ingestion_time_partitioned_table_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro_sql": "{% macro create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n  {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {% set ingestion_time_partition_config_raw = fromjson(tojson(raw_partition_by)) %}\n  {% do ingestion_time_partition_config_raw.update({'field':'_PARTITIONTIME'}) %}\n\n  {%- set ingestion_time_partition_config = adapter.parse_partition_by(ingestion_time_partition_config_raw) -%}\n\n  create or replace table {{ relation }} ({{table_dest_columns_csv}})\n  {{ partition_by(ingestion_time_partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8790276, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8809543, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8822143, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} (_partitiontime, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8841896, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.885303, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.8929074, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9000485, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9036334, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {%- if partition_by.time_ingestion_partitioning -%}\n          {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n          {%- else -%}\n          {{sql}}\n          {%- endif -%}\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9079626, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ declare_dbt_max_partition(this, partition_by, sql, 'sql') +\n     bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9111555, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render_wrapped() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9159956, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9175851, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9183352, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9193773, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.91971, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9208481, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.921475, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.922619, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9233234, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.924816, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9258077, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9270148, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.927647, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9305804, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9328089, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9353511, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.936466, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9376304, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.938867, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9396355, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.940776, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9413018, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.942642, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.943685, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9448574, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9455519, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9468586, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9474926, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9513366, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.952589, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9538355, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9548242, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9555676, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9562469, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9569626, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9578311, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9585907, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9592822, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9600008, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9606333, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9613848, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9620407, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9631867, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.963656, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.964898, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9656303, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9673147, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.969831, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9714637, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9727201, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.973517, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9747028, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9752212, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9762793, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9766314, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9779332, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9785538, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9799683, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9807239, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9820302, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9826791, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9838474, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.984374, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.993888, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9947002, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.995633, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9968817, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410500.9981043, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.175538, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.176549, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.17762, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.178426, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1790993, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1799257, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1810837, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1821988, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.184559, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1857073, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1864107, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1872113, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.188959, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1896794, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.190278, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1907134, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1913893, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1917026, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1924925, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1933236, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.195035, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.197183, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.1995394, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.200293, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2013106, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2022374, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.203406, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2055252, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.21015, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2113342, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2121775, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2128537, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2137005, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2147315, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2156167, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.216887, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.217764, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2185416, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2239819, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2244916, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2252018, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.225666, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2274535, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2282963, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2287288, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2297451, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2305415, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2314951, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2323027, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2333403, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2362938, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2372828, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2383645, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.23936, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2442179, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.245894, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2467144, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2473924, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2481503, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.250023, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2506468, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2513773, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2532382, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2583258, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2591064, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2604399, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2617397, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2632527, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2642484, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2667933, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2680142, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2714882, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2729015, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2740076, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2762754, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2776396, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.279027, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2803264, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2817082, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2860293, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2869823, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2875795, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2881773, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2887595, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.2988393, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3001206, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3009214, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3014073, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3020797, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3026323, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3039176, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.307607, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3085637, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3097022, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.311555, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.322921, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3237689, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3247302, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.327839, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.32863, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3294356, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3353434, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3414688, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3434634, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.344934, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3655972, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3809156, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3880985, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3894694, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3939085, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3952346, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.3982196, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4015024, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.402835, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4037125, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4049373, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4058092, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.407077, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4078846, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4089904, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4099274, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4106004, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4117715, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4359372, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4499571, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.455393, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.460484, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4642107, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4668932, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4720597, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.474535, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4774077, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4785218, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4816325, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4878035, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4894645, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4902115, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4909835, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4920864, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.493385, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.4943726, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5042677, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.514156, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5164323, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5172946, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5192087, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5210824, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.52302, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5245807, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5328178, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5349367, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5371397, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5505536, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.554977, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5561123, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5582573, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.559366, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5601878, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5612168, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5620165, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5628076, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5633495, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.565976, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5669005, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5729725, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5866656, "supported_languages": ["sql"]}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5933754, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5962675, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.5978913, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.603898, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6090405, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.612343, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6134694, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.615014, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6160197, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.617707, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6189506, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6209161, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6221206, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6233835, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.628403, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6306624, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6336582, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6356385, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6360927, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6380951, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.639126, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6403568, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6416233, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6429985, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.644378, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6457758, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6478124, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.649612, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6526532, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6561117, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.657397, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6582158, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6592894, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.659968, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6610045, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.661787, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6636767, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6663194, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6713843, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6733377, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.676445, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.678835, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.68273, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.689448, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.691557, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6948707, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6977139, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.6995227, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7003806, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7034824, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.70722, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7110472, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7149203, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.718754, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7204418, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7229168, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.725401, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.729276, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.733838, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7365413, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.740069, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.741336, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7441475, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7469625, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7480824, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.749633, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7514966, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7544513, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7577484, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7589667, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7613616, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7648683, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7665033, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7680304, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7707157, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7716057, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7724671, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7733703, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.774102, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7747948, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7792199, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7867205, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7885864, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.789915, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.7983727, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8131251, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.817497, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8237648, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8254375, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.826077, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8266215, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8281376, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8291457, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8307579, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.83335, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8347406, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8358889, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8372192, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8386765, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8398857, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8404486, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8422725, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8453474, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8480537, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8521106, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8541656, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.856239, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8592007, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8638272, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.866243, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8684168, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8704717, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8717885, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8735852, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8752048, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8773124, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8787942, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.880641, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8827422, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.885177, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8880208, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8902209, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8919115, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8943782, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.895845, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.8985164, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9028075, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.911725, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9184246, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.921915, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9262953, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9298067, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9342651, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.937061, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9406388, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9480946, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9543507, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410501.9634526, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410502.0056508, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410502.0144906, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410502.0244365, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410502.027319, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410502.029876, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678410502.0319908, "supported_languages": null}, "macro.jefferson_street_dbt.unnest_json_array": {"name": "unnest_json_array", "resource_type": "macro", "package_name": "jefferson_street_dbt", "path": "macros/unpack_array.sql", "original_file_path": "macros/unpack_array.sql", "unique_id": "macro.jefferson_street_dbt.unnest_json_array", "macro_sql": "{% macro unnest_json_array(column_name, table_name, other_col='cik') %}\n    (\n        SELECT \n            {{ other_col }}, \n            ROW_NUMBER() OVER() AS row_num,\n            val\n        FROM {{ table_name }},\n        UNNEST({{ column_name }}) AS val\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678414468.113708, "supported_languages": null}, "macro.jefferson_street_dbt.unnest_string_array": {"name": "unnest_string_array", "resource_type": "macro", "package_name": "jefferson_street_dbt", "path": "macros/unpack_array.sql", "original_file_path": "macros/unpack_array.sql", "unique_id": "macro.jefferson_street_dbt.unnest_string_array", "macro_sql": "{% macro unnest_string_array(column_name, table_name, other_col='cik') %}\n{# The inner select statement converts a string array into an array of strings #}\n{# The outer select statement unnests the array of strings #}\n    (\n        SELECT val, {{ other_col }}, ROW_NUMBER() OVER() as row_num\n        FROM \n        (\n            SELECT\n                {{ other_col }},\n                SPLIT(\n                  REPLACE(\n                    REPLACE(\n                      {{ column_name }}, ']', ''\n                    ), '[', ''\n                  ), ','\n                ) AS val_arr\n            FROM {{ table_name }}\n        ), \n        UNNEST(val_arr) AS val\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678414468.11468, "supported_languages": null}, "macro.jefferson_street_dbt.bt_unpack_from_base": {"name": "bt_unpack_from_base", "resource_type": "macro", "package_name": "jefferson_street_dbt", "path": "macros/bt_uploads/bt_unpack_extract.sql", "original_file_path": "macros/bt_uploads/bt_unpack_extract.sql", "unique_id": "macro.jefferson_street_dbt.bt_unpack_from_base", "macro_sql": "{% macro bt_unpack_from_base(cols, field) %}\nWITH\n\narrays AS (\n    SELECT\n        {% for c in cols %}\n        JSON_EXTRACT_STRING_ARRAY({{ field }}.{{c}}) AS {{c}}_col,\n        {% endfor %}\n        user,\n        tag,\n        upload_timestamp,\n        backtest_name\n    FROM  {{ ref('stg_bt_uploads__unnested') }}\n),\n\n{% for c in cols %}\n{{c}}_unnested AS (\n        SELECT \n            user,\n            tag,\n            upload_timestamp,\n            backtest_name,\n            ROW_NUMBER() OVER() AS row_num,\n            num_val\n        FROM arrays,\n        UNNEST({{c}}_col) AS num_val\n),\n{% endfor %}\n\njoined AS (\n    SELECT\n        {% for c in cols %}\n        {{c}}_unnested.num_val AS {{c}}_col,\n        {% endfor %}\n        {{ cols[0] }}_unnested.user,\n        {{ cols[0] }}_unnested.tag,\n        {{ cols[0] }}_unnested.upload_timestamp,\n        {{ cols[0] }}_unnested.backtest_name\n    FROM {{ cols[0] }}_unnested\n    {% for c in cols[1:] %}\n        INNER JOIN {{c}}_unnested ON {{ cols[0] }}_unnested.row_num = {{c}}_unnested.row_num\n    {% endfor %}\n    \n)\n\nSELECT * FROM joined\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678902468.3651147, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.jefferson_street_dbt.geo_fred__census_regions": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"], "model.jefferson_street_dbt.geo_fred__msas": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories", "seed.jefferson_street_dbt.state_mappings", "seed.jefferson_street_dbt.state_mappings"], "model.jefferson_street_dbt.geo_fred__bls_regions": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"], "model.jefferson_street_dbt.geo_fred__countries": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"], "model.jefferson_street_dbt.geo_fred__fed_districts": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"], "model.jefferson_street_dbt.geo_fred__bea_regions": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories", "seed.jefferson_street_dbt.state_mappings", "seed.jefferson_street_dbt.state_mappings"], "model.jefferson_street_dbt.geo_fred__counties": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories", "seed.jefferson_street_dbt.state_mappings", "seed.jefferson_street_dbt.state_mappings"], "model.jefferson_street_dbt.geo_fred__states": ["model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_categories"], "model.jefferson_street_dbt.flt_fred__observations": ["model.jefferson_street_dbt.dd_fred__observations", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"], "model.jefferson_street_dbt.flt_fred__release_series": ["model.jefferson_street_dbt.dd_fred__release_series", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"], "model.jefferson_street_dbt.flt_fred__series_categories": ["model.jefferson_street_dbt.dd_fred__series_categories", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"], "model.jefferson_street_dbt.flt_fred__series_tags": ["model.jefferson_street_dbt.dd_fred__series_tags", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity"], "model.jefferson_street_dbt.md_fred__series_completeness": ["model.jefferson_street_dbt.dd_fred__observations", "model.jefferson_street_dbt.dd_fred__release_series"], "model.jefferson_street_dbt.md_fred__series_continuity": ["model.jefferson_street_dbt.dd_fred__release_series", "model.jefferson_street_dbt.dd_fred__series_tags"], "model.jefferson_street_dbt.dd_fred__observations_revised": ["model.jefferson_street_dbt.rr_fred__observations_revised"], "model.jefferson_street_dbt.dd_fred__observations_unrevised": ["model.jefferson_street_dbt.rr_fred__observations_unrevised"], "model.jefferson_street_dbt.dd_fred__series_tags": ["model.jefferson_street_dbt.rr_fred__series_tags"], "model.jefferson_street_dbt.dd_fred__release_dates": ["model.jefferson_street_dbt.rr_fred__release_dates"], "model.jefferson_street_dbt.dd_fred__observations": ["model.jefferson_street_dbt.dd_fred__observations_revised", "model.jefferson_street_dbt.dd_fred__observations_unrevised"], "model.jefferson_street_dbt.dd_fred__release_series": ["model.jefferson_street_dbt.rr_fred__release_series"], "model.jefferson_street_dbt.dd_fred__series_categories": ["model.jefferson_street_dbt.rr_fred__series_categories"], "model.jefferson_street_dbt.rr_fred__series_tags": ["source.jefferson_street_dbt.fred_raw.tags"], "model.jefferson_street_dbt.rr_fred__series_categories": ["source.jefferson_street_dbt.fred_raw.categories"], "model.jefferson_street_dbt.rr_fred__release_series": ["source.jefferson_street_dbt.fred_raw.release_series"], "model.jefferson_street_dbt.rr_fred__release_dates": ["source.jefferson_street_dbt.fred_raw.release_dates"], "model.jefferson_street_dbt.rr_fred__observations_unrevised": ["source.jefferson_street_dbt.fred_raw.unrevised_observations"], "model.jefferson_street_dbt.rr_fred__observations_revised": ["source.jefferson_street_dbt.fred_raw.unrevised_observations"], "model.jefferson_street_dbt.stg_sec_edgar__company_meta": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"], "model.jefferson_street_dbt.stg_sec_edgar__company_former_names": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"], "model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap": ["source.jefferson_street_dbt.sec_edgar_raw.company_facts"], "model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei": ["source.jefferson_street_dbt.sec_edgar_raw.company_facts"], "model.jefferson_street_dbt.stg_sec_edgar__company_tickers": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"], "model.jefferson_street_dbt.stg_sec_edgar__company_addresses": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"], "model.jefferson_street_dbt.stg_sec_edgar__ticker_stream": ["source.jefferson_street_dbt.sec_edgar_raw.ticker_cik_mapping"], "seed.jefferson_street_dbt.gdp": [], "seed.jefferson_street_dbt.state_mappings": [], "seed.jefferson_street_dbt.gdp_depr": [], "seed.jefferson_street_dbt.gdp_with_country": [], "test.jefferson_street_dbt.unique_md_fred__series_continuity_series_id.a43ee5d50d": ["model.jefferson_street_dbt.md_fred__series_continuity"], "test.jefferson_street_dbt.unique_md_fred__series_completeness_series_id.1e2a427f1d": ["model.jefferson_street_dbt.md_fred__series_completeness"], "test.jefferson_street_dbt.unique_dd_fred__observations_revised_observation_id.35763d6c6a": ["model.jefferson_street_dbt.dd_fred__observations_revised"], "test.jefferson_street_dbt.unique_dd_fred__observations_unrevised_observation_id.33301dad18": ["model.jefferson_street_dbt.dd_fred__observations_unrevised"], "test.jefferson_street_dbt.unique_dd_fred__observations_observation_id.bfd1be5a05": ["model.jefferson_street_dbt.dd_fred__observations"], "test.jefferson_street_dbt.unique_dd_fred__release_dates_release_date_id.0aeead699b": ["model.jefferson_street_dbt.dd_fred__release_dates"], "test.jefferson_street_dbt.unique_dd_fred__release_series_series_id.b43dd759fd": ["model.jefferson_street_dbt.dd_fred__release_series"], "test.jefferson_street_dbt.unique_dd_fred__series_categories_category_unique_id.a991da4730": ["model.jefferson_street_dbt.dd_fred__series_categories"], "test.jefferson_street_dbt.unique_dd_fred__series_tags_tag_id.624bc7ce77": ["model.jefferson_street_dbt.dd_fred__series_tags"], "test.jefferson_street_dbt.not_null_rr_fred__observations_revised_observation_id.39bdf24e91": ["model.jefferson_street_dbt.rr_fred__observations_revised"], "test.jefferson_street_dbt.not_null_rr_fred__observations_unrevised_observation_id.ac8b860a09": ["model.jefferson_street_dbt.rr_fred__observations_unrevised"], "test.jefferson_street_dbt.not_null_rr_fred__release_dates_release_date_id.c1dd959c90": ["model.jefferson_street_dbt.rr_fred__release_dates"], "test.jefferson_street_dbt.not_null_rr_fred__release_series_series_id.079bd8b6ff": ["model.jefferson_street_dbt.rr_fred__release_series"], "test.jefferson_street_dbt.not_null_rr_fred__series_categories_category_unique_id.7fb7ac409d": ["model.jefferson_street_dbt.rr_fred__series_categories"], "test.jefferson_street_dbt.not_null_rr_fred__series_tags_tag_id.78eb17cd27": ["model.jefferson_street_dbt.rr_fred__series_tags"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_addresses_address_id.2b25b2052c": ["model.jefferson_street_dbt.stg_sec_edgar__company_addresses"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_addresses_address_id.2999203aef": ["model.jefferson_street_dbt.stg_sec_edgar__company_addresses"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_dei_metric_id.42d9390639": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_dei_metric_id.9ce2008275": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_us_gaap_metric_id.64d52e6d26": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_us_gaap_metric_id.0c7476e54a": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_former_names_company_name_id.380772e247": ["model.jefferson_street_dbt.stg_sec_edgar__company_former_names"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_former_names_company_name_id.b42a2182fd": ["model.jefferson_street_dbt.stg_sec_edgar__company_former_names"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_meta_cik.6838acc1a3": ["model.jefferson_street_dbt.stg_sec_edgar__company_meta"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_meta_cik.4e6cd34c6b": ["model.jefferson_street_dbt.stg_sec_edgar__company_meta"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_tickers_ticker_id.bd629b3a85": ["model.jefferson_street_dbt.stg_sec_edgar__company_tickers"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_tickers_ticker_id.397108271b": ["model.jefferson_street_dbt.stg_sec_edgar__company_tickers"], "test.jefferson_street_dbt.unique_stg_sec_edgar__ticker_stream_cik.2a0d68c8ca": ["model.jefferson_street_dbt.stg_sec_edgar__ticker_stream"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__ticker_stream_cik.3ffa2af384": ["model.jefferson_street_dbt.stg_sec_edgar__ticker_stream"], "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent": ["source.jefferson_street_dbt.sec_edgar_raw.recent_submissions"], "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent": ["source.jefferson_street_dbt.sec_edgar_raw.subsequent_submissions"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_recent_accession_number.26645ae23a": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_recent_accession_number.29113cf476": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_subsequent_accession_number.ce0c89ea70": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent"], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_subsequent_accession_number.2b8a717f41": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent"], "model.jefferson_street_dbt.stg_bt_uploads__unnested": ["source.jefferson_street_dbt.bt_uploads.raw", "source.jefferson_street_dbt.bt_uploads.raw"], "model.jefferson_street_dbt.stg_bt_uploads__stats": ["model.jefferson_street_dbt.stg_bt_uploads__unnested", "model.jefferson_street_dbt.stg_bt_uploads__unnested"], "model.jefferson_street_dbt.stg_bt_uploads__prices": ["model.jefferson_street_dbt.stg_bt_uploads__unnested"], "seed.jefferson_street_dbt.metric_labels": [], "model.jefferson_street_dbt.stg_bt_uploads__weights": ["model.jefferson_street_dbt.stg_bt_uploads__unnested"], "source.jefferson_street_dbt.fred_raw.releases": [], "source.jefferson_street_dbt.fred_raw.release_dates": [], "source.jefferson_street_dbt.fred_raw.release_series": [], "source.jefferson_street_dbt.fred_raw.categories": [], "source.jefferson_street_dbt.fred_raw.revised_observations": [], "source.jefferson_street_dbt.fred_raw.unrevised_observations": [], "source.jefferson_street_dbt.fred_raw.tags": [], "source.jefferson_street_dbt.sec_edgar_raw.ticker_cik_mapping": [], "source.jefferson_street_dbt.sec_edgar_raw.company_facts": [], "source.jefferson_street_dbt.sec_edgar_raw.subsequent_submissions": [], "source.jefferson_street_dbt.sec_edgar_raw.recent_submissions": [], "source.jefferson_street_dbt.bt_uploads.raw": []}, "child_map": {"model.jefferson_street_dbt.geo_fred__census_regions": [], "model.jefferson_street_dbt.geo_fred__msas": [], "model.jefferson_street_dbt.geo_fred__bls_regions": [], "model.jefferson_street_dbt.geo_fred__countries": [], "model.jefferson_street_dbt.geo_fred__fed_districts": [], "model.jefferson_street_dbt.geo_fred__bea_regions": [], "model.jefferson_street_dbt.geo_fred__counties": [], "model.jefferson_street_dbt.geo_fred__states": [], "model.jefferson_street_dbt.flt_fred__observations": [], "model.jefferson_street_dbt.flt_fred__release_series": [], "model.jefferson_street_dbt.flt_fred__series_categories": ["model.jefferson_street_dbt.geo_fred__bea_regions", "model.jefferson_street_dbt.geo_fred__bea_regions", "model.jefferson_street_dbt.geo_fred__bls_regions", "model.jefferson_street_dbt.geo_fred__bls_regions", "model.jefferson_street_dbt.geo_fred__census_regions", "model.jefferson_street_dbt.geo_fred__census_regions", "model.jefferson_street_dbt.geo_fred__census_regions", "model.jefferson_street_dbt.geo_fred__census_regions", "model.jefferson_street_dbt.geo_fred__counties", "model.jefferson_street_dbt.geo_fred__counties", "model.jefferson_street_dbt.geo_fred__countries", "model.jefferson_street_dbt.geo_fred__countries", "model.jefferson_street_dbt.geo_fred__fed_districts", "model.jefferson_street_dbt.geo_fred__fed_districts", "model.jefferson_street_dbt.geo_fred__msas", "model.jefferson_street_dbt.geo_fred__msas", "model.jefferson_street_dbt.geo_fred__states", "model.jefferson_street_dbt.geo_fred__states"], "model.jefferson_street_dbt.flt_fred__series_tags": [], "model.jefferson_street_dbt.md_fred__series_completeness": ["model.jefferson_street_dbt.flt_fred__observations", "model.jefferson_street_dbt.flt_fred__release_series", "model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_tags", "test.jefferson_street_dbt.unique_md_fred__series_completeness_series_id.1e2a427f1d"], "model.jefferson_street_dbt.md_fred__series_continuity": ["model.jefferson_street_dbt.flt_fred__observations", "model.jefferson_street_dbt.flt_fred__release_series", "model.jefferson_street_dbt.flt_fred__series_categories", "model.jefferson_street_dbt.flt_fred__series_tags", "test.jefferson_street_dbt.unique_md_fred__series_continuity_series_id.a43ee5d50d"], "model.jefferson_street_dbt.dd_fred__observations_revised": ["model.jefferson_street_dbt.dd_fred__observations", "test.jefferson_street_dbt.unique_dd_fred__observations_revised_observation_id.35763d6c6a"], "model.jefferson_street_dbt.dd_fred__observations_unrevised": ["model.jefferson_street_dbt.dd_fred__observations", "test.jefferson_street_dbt.unique_dd_fred__observations_unrevised_observation_id.33301dad18"], "model.jefferson_street_dbt.dd_fred__series_tags": ["model.jefferson_street_dbt.flt_fred__series_tags", "model.jefferson_street_dbt.md_fred__series_continuity", "test.jefferson_street_dbt.unique_dd_fred__series_tags_tag_id.624bc7ce77"], "model.jefferson_street_dbt.dd_fred__release_dates": ["test.jefferson_street_dbt.unique_dd_fred__release_dates_release_date_id.0aeead699b"], "model.jefferson_street_dbt.dd_fred__observations": ["model.jefferson_street_dbt.flt_fred__observations", "model.jefferson_street_dbt.md_fred__series_completeness", "test.jefferson_street_dbt.unique_dd_fred__observations_observation_id.bfd1be5a05"], "model.jefferson_street_dbt.dd_fred__release_series": ["model.jefferson_street_dbt.flt_fred__release_series", "model.jefferson_street_dbt.md_fred__series_completeness", "model.jefferson_street_dbt.md_fred__series_continuity", "test.jefferson_street_dbt.unique_dd_fred__release_series_series_id.b43dd759fd"], "model.jefferson_street_dbt.dd_fred__series_categories": ["model.jefferson_street_dbt.flt_fred__series_categories", "test.jefferson_street_dbt.unique_dd_fred__series_categories_category_unique_id.a991da4730"], "model.jefferson_street_dbt.rr_fred__series_tags": ["model.jefferson_street_dbt.dd_fred__series_tags", "test.jefferson_street_dbt.not_null_rr_fred__series_tags_tag_id.78eb17cd27"], "model.jefferson_street_dbt.rr_fred__series_categories": ["model.jefferson_street_dbt.dd_fred__series_categories", "test.jefferson_street_dbt.not_null_rr_fred__series_categories_category_unique_id.7fb7ac409d"], "model.jefferson_street_dbt.rr_fred__release_series": ["model.jefferson_street_dbt.dd_fred__release_series", "test.jefferson_street_dbt.not_null_rr_fred__release_series_series_id.079bd8b6ff"], "model.jefferson_street_dbt.rr_fred__release_dates": ["model.jefferson_street_dbt.dd_fred__release_dates", "test.jefferson_street_dbt.not_null_rr_fred__release_dates_release_date_id.c1dd959c90"], "model.jefferson_street_dbt.rr_fred__observations_unrevised": ["model.jefferson_street_dbt.dd_fred__observations_unrevised", "test.jefferson_street_dbt.not_null_rr_fred__observations_unrevised_observation_id.ac8b860a09"], "model.jefferson_street_dbt.rr_fred__observations_revised": ["model.jefferson_street_dbt.dd_fred__observations_revised", "test.jefferson_street_dbt.not_null_rr_fred__observations_revised_observation_id.39bdf24e91"], "model.jefferson_street_dbt.stg_sec_edgar__company_meta": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_meta_cik.4e6cd34c6b", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_meta_cik.6838acc1a3"], "model.jefferson_street_dbt.stg_sec_edgar__company_former_names": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_former_names_company_name_id.b42a2182fd", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_former_names_company_name_id.380772e247"], "model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_us_gaap_metric_id.0c7476e54a", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_us_gaap_metric_id.64d52e6d26"], "model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_dei_metric_id.9ce2008275", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_dei_metric_id.42d9390639"], "model.jefferson_street_dbt.stg_sec_edgar__company_tickers": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_tickers_ticker_id.397108271b", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_tickers_ticker_id.bd629b3a85"], "model.jefferson_street_dbt.stg_sec_edgar__company_addresses": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_addresses_address_id.2999203aef", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_addresses_address_id.2b25b2052c"], "model.jefferson_street_dbt.stg_sec_edgar__ticker_stream": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__ticker_stream_cik.3ffa2af384", "test.jefferson_street_dbt.unique_stg_sec_edgar__ticker_stream_cik.2a0d68c8ca"], "seed.jefferson_street_dbt.gdp": [], "seed.jefferson_street_dbt.state_mappings": ["model.jefferson_street_dbt.geo_fred__bea_regions", "model.jefferson_street_dbt.geo_fred__bea_regions", "model.jefferson_street_dbt.geo_fred__counties", "model.jefferson_street_dbt.geo_fred__counties", "model.jefferson_street_dbt.geo_fred__msas", "model.jefferson_street_dbt.geo_fred__msas"], "seed.jefferson_street_dbt.gdp_depr": [], "seed.jefferson_street_dbt.gdp_with_country": [], "test.jefferson_street_dbt.unique_md_fred__series_continuity_series_id.a43ee5d50d": [], "test.jefferson_street_dbt.unique_md_fred__series_completeness_series_id.1e2a427f1d": [], "test.jefferson_street_dbt.unique_dd_fred__observations_revised_observation_id.35763d6c6a": [], "test.jefferson_street_dbt.unique_dd_fred__observations_unrevised_observation_id.33301dad18": [], "test.jefferson_street_dbt.unique_dd_fred__observations_observation_id.bfd1be5a05": [], "test.jefferson_street_dbt.unique_dd_fred__release_dates_release_date_id.0aeead699b": [], "test.jefferson_street_dbt.unique_dd_fred__release_series_series_id.b43dd759fd": [], "test.jefferson_street_dbt.unique_dd_fred__series_categories_category_unique_id.a991da4730": [], "test.jefferson_street_dbt.unique_dd_fred__series_tags_tag_id.624bc7ce77": [], "test.jefferson_street_dbt.not_null_rr_fred__observations_revised_observation_id.39bdf24e91": [], "test.jefferson_street_dbt.not_null_rr_fred__observations_unrevised_observation_id.ac8b860a09": [], "test.jefferson_street_dbt.not_null_rr_fred__release_dates_release_date_id.c1dd959c90": [], "test.jefferson_street_dbt.not_null_rr_fred__release_series_series_id.079bd8b6ff": [], "test.jefferson_street_dbt.not_null_rr_fred__series_categories_category_unique_id.7fb7ac409d": [], "test.jefferson_street_dbt.not_null_rr_fred__series_tags_tag_id.78eb17cd27": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_addresses_address_id.2b25b2052c": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_addresses_address_id.2999203aef": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_dei_metric_id.42d9390639": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_dei_metric_id.9ce2008275": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_facts_us_gaap_metric_id.64d52e6d26": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_facts_us_gaap_metric_id.0c7476e54a": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_former_names_company_name_id.380772e247": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_former_names_company_name_id.b42a2182fd": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_meta_cik.6838acc1a3": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_meta_cik.4e6cd34c6b": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_tickers_ticker_id.bd629b3a85": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_tickers_ticker_id.397108271b": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__ticker_stream_cik.2a0d68c8ca": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__ticker_stream_cik.3ffa2af384": [], "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_recent_accession_number.29113cf476", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_recent_accession_number.26645ae23a"], "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent": ["test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_subsequent_accession_number.2b8a717f41", "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_subsequent_accession_number.ce0c89ea70"], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_recent_accession_number.26645ae23a": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_recent_accession_number.29113cf476": [], "test.jefferson_street_dbt.unique_stg_sec_edgar__company_submissions_subsequent_accession_number.ce0c89ea70": [], "test.jefferson_street_dbt.not_null_stg_sec_edgar__company_submissions_subsequent_accession_number.2b8a717f41": [], "model.jefferson_street_dbt.stg_bt_uploads__unnested": ["model.jefferson_street_dbt.stg_bt_uploads__prices", "model.jefferson_street_dbt.stg_bt_uploads__stats", "model.jefferson_street_dbt.stg_bt_uploads__stats", "model.jefferson_street_dbt.stg_bt_uploads__weights"], "model.jefferson_street_dbt.stg_bt_uploads__stats": [], "model.jefferson_street_dbt.stg_bt_uploads__prices": [], "seed.jefferson_street_dbt.metric_labels": [], "model.jefferson_street_dbt.stg_bt_uploads__weights": [], "source.jefferson_street_dbt.fred_raw.releases": [], "source.jefferson_street_dbt.fred_raw.release_dates": ["model.jefferson_street_dbt.rr_fred__release_dates"], "source.jefferson_street_dbt.fred_raw.release_series": ["model.jefferson_street_dbt.rr_fred__release_series"], "source.jefferson_street_dbt.fred_raw.categories": ["model.jefferson_street_dbt.rr_fred__series_categories"], "source.jefferson_street_dbt.fred_raw.revised_observations": [], "source.jefferson_street_dbt.fred_raw.unrevised_observations": ["model.jefferson_street_dbt.rr_fred__observations_revised", "model.jefferson_street_dbt.rr_fred__observations_unrevised"], "source.jefferson_street_dbt.fred_raw.tags": ["model.jefferson_street_dbt.rr_fred__series_tags"], "source.jefferson_street_dbt.sec_edgar_raw.ticker_cik_mapping": ["model.jefferson_street_dbt.stg_sec_edgar__ticker_stream"], "source.jefferson_street_dbt.sec_edgar_raw.company_facts": ["model.jefferson_street_dbt.stg_sec_edgar__company_facts_dei", "model.jefferson_street_dbt.stg_sec_edgar__company_facts_us_gaap"], "source.jefferson_street_dbt.sec_edgar_raw.subsequent_submissions": ["model.jefferson_street_dbt.stg_sec_edgar__company_submissions_subsequent"], "source.jefferson_street_dbt.sec_edgar_raw.recent_submissions": ["model.jefferson_street_dbt.stg_sec_edgar__company_addresses", "model.jefferson_street_dbt.stg_sec_edgar__company_former_names", "model.jefferson_street_dbt.stg_sec_edgar__company_meta", "model.jefferson_street_dbt.stg_sec_edgar__company_submissions_recent", "model.jefferson_street_dbt.stg_sec_edgar__company_tickers"], "source.jefferson_street_dbt.bt_uploads.raw": ["model.jefferson_street_dbt.stg_bt_uploads__unnested", "model.jefferson_street_dbt.stg_bt_uploads__unnested"]}}